
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = {
  id: number
  email: string
  name: string
  phoneNumber: string
  password: string
  profile_img_num: number
  createdAt: Date
}

/**
 * Model Map
 * 
 */
export type Map = {
  id: number
  lat: number
  long: number
  title: string
  address: string
  install_date: Date
  pri_pub_div: string
  in_out_div: string
}

/**
 * Model Post
 * 
 */
export type Post = {
  id: number
  title: string
  info: string
  src_url: string | null
  createdAt: Date
  map_id: number
}

/**
 * Model PostLike
 * 
 */
export type PostLike = {
  user_id: number
  post_id: number
}

/**
 * Model Post_Comment
 * 
 */
export type Post_Comment = {
  id: number
  content: string
  star: number
  createdAt: Date
  post_id: number
  user_id: number
}

/**
 * Model Chat
 * 
 */
export type Chat = {
  id: number
  message: string
  post_id: number
  user_id: number
}

/**
 * Model Search
 * 
 */
export type Search = {
  id: number
  search_title: string
  post_id: number
}

/**
 * Model Profile
 * 
 */
export type Profile = {
  id: number
  user_id: number
  post_id: number
  postcomment_id: number | null
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.map`: Exposes CRUD operations for the **Map** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Maps
    * const maps = await prisma.map.findMany()
    * ```
    */
  get map(): Prisma.MapDelegate<GlobalReject>;

  /**
   * `prisma.post`: Exposes CRUD operations for the **Post** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Posts
    * const posts = await prisma.post.findMany()
    * ```
    */
  get post(): Prisma.PostDelegate<GlobalReject>;

  /**
   * `prisma.postLike`: Exposes CRUD operations for the **PostLike** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PostLikes
    * const postLikes = await prisma.postLike.findMany()
    * ```
    */
  get postLike(): Prisma.PostLikeDelegate<GlobalReject>;

  /**
   * `prisma.post_Comment`: Exposes CRUD operations for the **Post_Comment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Post_Comments
    * const post_Comments = await prisma.post_Comment.findMany()
    * ```
    */
  get post_Comment(): Prisma.Post_CommentDelegate<GlobalReject>;

  /**
   * `prisma.chat`: Exposes CRUD operations for the **Chat** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Chats
    * const chats = await prisma.chat.findMany()
    * ```
    */
  get chat(): Prisma.ChatDelegate<GlobalReject>;

  /**
   * `prisma.search`: Exposes CRUD operations for the **Search** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Searches
    * const searches = await prisma.search.findMany()
    * ```
    */
  get search(): Prisma.SearchDelegate<GlobalReject>;

  /**
   * `prisma.profile`: Exposes CRUD operations for the **Profile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Profiles
    * const profiles = await prisma.profile.findMany()
    * ```
    */
  get profile(): Prisma.ProfileDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.14.1
   * Query Engine version: d9a4c5988f480fa576d43970d5a23641aa77bc9c
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Map: 'Map',
    Post: 'Post',
    PostLike: 'PostLike',
    Post_Comment: 'Post_Comment',
    Chat: 'Chat',
    Search: 'Search',
    Profile: 'Profile'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    postlike: number
    postcomment: number
    chat: number
    profile: number
  }

  export type UserCountOutputTypeSelect = {
    postlike?: boolean
    postcomment?: boolean
    chat?: boolean
    profile?: boolean
  }

  export type UserCountOutputTypeGetPayload<S extends boolean | null | undefined | UserCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? UserCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (UserCountOutputTypeArgs)
    ? UserCountOutputType 
    : S extends { select: any } & (UserCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
      : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Count Type MapCountOutputType
   */


  export type MapCountOutputType = {
    post: number
  }

  export type MapCountOutputTypeSelect = {
    post?: boolean
  }

  export type MapCountOutputTypeGetPayload<S extends boolean | null | undefined | MapCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? MapCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (MapCountOutputTypeArgs)
    ? MapCountOutputType 
    : S extends { select: any } & (MapCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof MapCountOutputType ? MapCountOutputType[P] : never
  } 
      : MapCountOutputType




  // Custom InputTypes

  /**
   * MapCountOutputType without action
   */
  export type MapCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the MapCountOutputType
     */
    select?: MapCountOutputTypeSelect | null
  }



  /**
   * Count Type PostCountOutputType
   */


  export type PostCountOutputType = {
    postlike: number
    postcomment: number
    chat: number
    search: number
    profile: number
  }

  export type PostCountOutputTypeSelect = {
    postlike?: boolean
    postcomment?: boolean
    chat?: boolean
    search?: boolean
    profile?: boolean
  }

  export type PostCountOutputTypeGetPayload<S extends boolean | null | undefined | PostCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? PostCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (PostCountOutputTypeArgs)
    ? PostCountOutputType 
    : S extends { select: any } & (PostCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof PostCountOutputType ? PostCountOutputType[P] : never
  } 
      : PostCountOutputType




  // Custom InputTypes

  /**
   * PostCountOutputType without action
   */
  export type PostCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the PostCountOutputType
     */
    select?: PostCountOutputTypeSelect | null
  }



  /**
   * Count Type Post_CommentCountOutputType
   */


  export type Post_CommentCountOutputType = {
    profile: number
  }

  export type Post_CommentCountOutputTypeSelect = {
    profile?: boolean
  }

  export type Post_CommentCountOutputTypeGetPayload<S extends boolean | null | undefined | Post_CommentCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Post_CommentCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (Post_CommentCountOutputTypeArgs)
    ? Post_CommentCountOutputType 
    : S extends { select: any } & (Post_CommentCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof Post_CommentCountOutputType ? Post_CommentCountOutputType[P] : never
  } 
      : Post_CommentCountOutputType




  // Custom InputTypes

  /**
   * Post_CommentCountOutputType without action
   */
  export type Post_CommentCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the Post_CommentCountOutputType
     */
    select?: Post_CommentCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
    profile_img_num: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
    profile_img_num: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    email: string | null
    name: string | null
    phoneNumber: string | null
    password: string | null
    profile_img_num: number | null
    createdAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    name: string | null
    phoneNumber: string | null
    password: string | null
    profile_img_num: number | null
    createdAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    name: number
    phoneNumber: number
    password: number
    profile_img_num: number
    createdAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
    profile_img_num?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    profile_img_num?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    name?: true
    phoneNumber?: true
    password?: true
    profile_img_num?: true
    createdAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    name?: true
    phoneNumber?: true
    password?: true
    profile_img_num?: true
    createdAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    name?: true
    phoneNumber?: true
    password?: true
    profile_img_num?: true
    createdAt?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: UserScalarFieldEnum[]
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: number
    email: string
    name: string
    phoneNumber: string
    password: string
    profile_img_num: number
    createdAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    email?: boolean
    name?: boolean
    phoneNumber?: boolean
    password?: boolean
    profile_img_num?: boolean
    createdAt?: boolean
    postlike?: boolean | User$postlikeArgs
    postcomment?: boolean | User$postcommentArgs
    chat?: boolean | User$chatArgs
    profile?: boolean | User$profileArgs
    _count?: boolean | UserCountOutputTypeArgs
  }


  export type UserInclude = {
    postlike?: boolean | User$postlikeArgs
    postcomment?: boolean | User$postcommentArgs
    chat?: boolean | User$chatArgs
    profile?: boolean | User$profileArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<S extends boolean | null | undefined | UserArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? User :
    S extends undefined ? never :
    S extends { include: any } & (UserArgs | UserFindManyArgs)
    ? User  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'postlike' ? Array < PostLikeGetPayload<S['include'][P]>>  :
        P extends 'postcomment' ? Array < Post_CommentGetPayload<S['include'][P]>>  :
        P extends 'chat' ? Array < ChatGetPayload<S['include'][P]>>  :
        P extends 'profile' ? Array < ProfileGetPayload<S['include'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (UserArgs | UserFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'postlike' ? Array < PostLikeGetPayload<S['select'][P]>>  :
        P extends 'postcomment' ? Array < Post_CommentGetPayload<S['select'][P]>>  :
        P extends 'chat' ? Array < ChatGetPayload<S['select'][P]>>  :
        P extends 'profile' ? Array < ProfileGetPayload<S['select'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof User ? User[P] : never
  } 
      : User


  type UserCountArgs = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): Prisma.PrismaPromise<Array<UserGetPayload<T>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    postlike<T extends User$postlikeArgs= {}>(args?: Subset<T, User$postlikeArgs>): Prisma.PrismaPromise<Array<PostLikeGetPayload<T>>| Null>;

    postcomment<T extends User$postcommentArgs= {}>(args?: Subset<T, User$postcommentArgs>): Prisma.PrismaPromise<Array<Post_CommentGetPayload<T>>| Null>;

    chat<T extends User$chatArgs= {}>(args?: Subset<T, User$chatArgs>): Prisma.PrismaPromise<Array<ChatGetPayload<T>>| Null>;

    profile<T extends User$profileArgs= {}>(args?: Subset<T, User$profileArgs>): Prisma.PrismaPromise<Array<ProfileGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUnique
   */
  export interface UserFindUniqueArgs extends UserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User findFirst
   */
  export interface UserFindFirstArgs extends UserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     */
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.postlike
   */
  export type User$postlikeArgs = {
    /**
     * Select specific fields to fetch from the PostLike
     */
    select?: PostLikeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostLikeInclude | null
    where?: PostLikeWhereInput
    orderBy?: Enumerable<PostLikeOrderByWithRelationInput>
    cursor?: PostLikeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<PostLikeScalarFieldEnum>
  }


  /**
   * User.postcomment
   */
  export type User$postcommentArgs = {
    /**
     * Select specific fields to fetch from the Post_Comment
     */
    select?: Post_CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Post_CommentInclude | null
    where?: Post_CommentWhereInput
    orderBy?: Enumerable<Post_CommentOrderByWithRelationInput>
    cursor?: Post_CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<Post_CommentScalarFieldEnum>
  }


  /**
   * User.chat
   */
  export type User$chatArgs = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatInclude | null
    where?: ChatWhereInput
    orderBy?: Enumerable<ChatOrderByWithRelationInput>
    cursor?: ChatWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ChatScalarFieldEnum>
  }


  /**
   * User.profile
   */
  export type User$profileArgs = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude | null
    where?: ProfileWhereInput
    orderBy?: Enumerable<ProfileOrderByWithRelationInput>
    cursor?: ProfileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ProfileScalarFieldEnum>
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
  }



  /**
   * Model Map
   */


  export type AggregateMap = {
    _count: MapCountAggregateOutputType | null
    _avg: MapAvgAggregateOutputType | null
    _sum: MapSumAggregateOutputType | null
    _min: MapMinAggregateOutputType | null
    _max: MapMaxAggregateOutputType | null
  }

  export type MapAvgAggregateOutputType = {
    id: number | null
    lat: number | null
    long: number | null
  }

  export type MapSumAggregateOutputType = {
    id: number | null
    lat: number | null
    long: number | null
  }

  export type MapMinAggregateOutputType = {
    id: number | null
    lat: number | null
    long: number | null
    title: string | null
    address: string | null
    install_date: Date | null
    pri_pub_div: string | null
    in_out_div: string | null
  }

  export type MapMaxAggregateOutputType = {
    id: number | null
    lat: number | null
    long: number | null
    title: string | null
    address: string | null
    install_date: Date | null
    pri_pub_div: string | null
    in_out_div: string | null
  }

  export type MapCountAggregateOutputType = {
    id: number
    lat: number
    long: number
    title: number
    address: number
    install_date: number
    pri_pub_div: number
    in_out_div: number
    _all: number
  }


  export type MapAvgAggregateInputType = {
    id?: true
    lat?: true
    long?: true
  }

  export type MapSumAggregateInputType = {
    id?: true
    lat?: true
    long?: true
  }

  export type MapMinAggregateInputType = {
    id?: true
    lat?: true
    long?: true
    title?: true
    address?: true
    install_date?: true
    pri_pub_div?: true
    in_out_div?: true
  }

  export type MapMaxAggregateInputType = {
    id?: true
    lat?: true
    long?: true
    title?: true
    address?: true
    install_date?: true
    pri_pub_div?: true
    in_out_div?: true
  }

  export type MapCountAggregateInputType = {
    id?: true
    lat?: true
    long?: true
    title?: true
    address?: true
    install_date?: true
    pri_pub_div?: true
    in_out_div?: true
    _all?: true
  }

  export type MapAggregateArgs = {
    /**
     * Filter which Map to aggregate.
     */
    where?: MapWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Maps to fetch.
     */
    orderBy?: Enumerable<MapOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MapWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Maps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Maps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Maps
    **/
    _count?: true | MapCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MapAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MapSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MapMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MapMaxAggregateInputType
  }

  export type GetMapAggregateType<T extends MapAggregateArgs> = {
        [P in keyof T & keyof AggregateMap]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMap[P]>
      : GetScalarType<T[P], AggregateMap[P]>
  }




  export type MapGroupByArgs = {
    where?: MapWhereInput
    orderBy?: Enumerable<MapOrderByWithAggregationInput>
    by: MapScalarFieldEnum[]
    having?: MapScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MapCountAggregateInputType | true
    _avg?: MapAvgAggregateInputType
    _sum?: MapSumAggregateInputType
    _min?: MapMinAggregateInputType
    _max?: MapMaxAggregateInputType
  }


  export type MapGroupByOutputType = {
    id: number
    lat: number
    long: number
    title: string
    address: string
    install_date: Date
    pri_pub_div: string
    in_out_div: string
    _count: MapCountAggregateOutputType | null
    _avg: MapAvgAggregateOutputType | null
    _sum: MapSumAggregateOutputType | null
    _min: MapMinAggregateOutputType | null
    _max: MapMaxAggregateOutputType | null
  }

  type GetMapGroupByPayload<T extends MapGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<MapGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MapGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MapGroupByOutputType[P]>
            : GetScalarType<T[P], MapGroupByOutputType[P]>
        }
      >
    >


  export type MapSelect = {
    id?: boolean
    lat?: boolean
    long?: boolean
    title?: boolean
    address?: boolean
    install_date?: boolean
    pri_pub_div?: boolean
    in_out_div?: boolean
    post?: boolean | Map$postArgs
    _count?: boolean | MapCountOutputTypeArgs
  }


  export type MapInclude = {
    post?: boolean | Map$postArgs
    _count?: boolean | MapCountOutputTypeArgs
  }

  export type MapGetPayload<S extends boolean | null | undefined | MapArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Map :
    S extends undefined ? never :
    S extends { include: any } & (MapArgs | MapFindManyArgs)
    ? Map  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'post' ? Array < PostGetPayload<S['include'][P]>>  :
        P extends '_count' ? MapCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (MapArgs | MapFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'post' ? Array < PostGetPayload<S['select'][P]>>  :
        P extends '_count' ? MapCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Map ? Map[P] : never
  } 
      : Map


  type MapCountArgs = 
    Omit<MapFindManyArgs, 'select' | 'include'> & {
      select?: MapCountAggregateInputType | true
    }

  export interface MapDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Map that matches the filter.
     * @param {MapFindUniqueArgs} args - Arguments to find a Map
     * @example
     * // Get one Map
     * const map = await prisma.map.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MapFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, MapFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Map'> extends True ? Prisma__MapClient<MapGetPayload<T>> : Prisma__MapClient<MapGetPayload<T> | null, null>

    /**
     * Find one Map that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {MapFindUniqueOrThrowArgs} args - Arguments to find a Map
     * @example
     * // Get one Map
     * const map = await prisma.map.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MapFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, MapFindUniqueOrThrowArgs>
    ): Prisma__MapClient<MapGetPayload<T>>

    /**
     * Find the first Map that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MapFindFirstArgs} args - Arguments to find a Map
     * @example
     * // Get one Map
     * const map = await prisma.map.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MapFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, MapFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Map'> extends True ? Prisma__MapClient<MapGetPayload<T>> : Prisma__MapClient<MapGetPayload<T> | null, null>

    /**
     * Find the first Map that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MapFindFirstOrThrowArgs} args - Arguments to find a Map
     * @example
     * // Get one Map
     * const map = await prisma.map.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MapFindFirstOrThrowArgs>(
      args?: SelectSubset<T, MapFindFirstOrThrowArgs>
    ): Prisma__MapClient<MapGetPayload<T>>

    /**
     * Find zero or more Maps that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MapFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Maps
     * const maps = await prisma.map.findMany()
     * 
     * // Get first 10 Maps
     * const maps = await prisma.map.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const mapWithIdOnly = await prisma.map.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MapFindManyArgs>(
      args?: SelectSubset<T, MapFindManyArgs>
    ): Prisma.PrismaPromise<Array<MapGetPayload<T>>>

    /**
     * Create a Map.
     * @param {MapCreateArgs} args - Arguments to create a Map.
     * @example
     * // Create one Map
     * const Map = await prisma.map.create({
     *   data: {
     *     // ... data to create a Map
     *   }
     * })
     * 
    **/
    create<T extends MapCreateArgs>(
      args: SelectSubset<T, MapCreateArgs>
    ): Prisma__MapClient<MapGetPayload<T>>

    /**
     * Create many Maps.
     *     @param {MapCreateManyArgs} args - Arguments to create many Maps.
     *     @example
     *     // Create many Maps
     *     const map = await prisma.map.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MapCreateManyArgs>(
      args?: SelectSubset<T, MapCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Map.
     * @param {MapDeleteArgs} args - Arguments to delete one Map.
     * @example
     * // Delete one Map
     * const Map = await prisma.map.delete({
     *   where: {
     *     // ... filter to delete one Map
     *   }
     * })
     * 
    **/
    delete<T extends MapDeleteArgs>(
      args: SelectSubset<T, MapDeleteArgs>
    ): Prisma__MapClient<MapGetPayload<T>>

    /**
     * Update one Map.
     * @param {MapUpdateArgs} args - Arguments to update one Map.
     * @example
     * // Update one Map
     * const map = await prisma.map.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MapUpdateArgs>(
      args: SelectSubset<T, MapUpdateArgs>
    ): Prisma__MapClient<MapGetPayload<T>>

    /**
     * Delete zero or more Maps.
     * @param {MapDeleteManyArgs} args - Arguments to filter Maps to delete.
     * @example
     * // Delete a few Maps
     * const { count } = await prisma.map.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MapDeleteManyArgs>(
      args?: SelectSubset<T, MapDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Maps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MapUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Maps
     * const map = await prisma.map.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MapUpdateManyArgs>(
      args: SelectSubset<T, MapUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Map.
     * @param {MapUpsertArgs} args - Arguments to update or create a Map.
     * @example
     * // Update or create a Map
     * const map = await prisma.map.upsert({
     *   create: {
     *     // ... data to create a Map
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Map we want to update
     *   }
     * })
    **/
    upsert<T extends MapUpsertArgs>(
      args: SelectSubset<T, MapUpsertArgs>
    ): Prisma__MapClient<MapGetPayload<T>>

    /**
     * Count the number of Maps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MapCountArgs} args - Arguments to filter Maps to count.
     * @example
     * // Count the number of Maps
     * const count = await prisma.map.count({
     *   where: {
     *     // ... the filter for the Maps we want to count
     *   }
     * })
    **/
    count<T extends MapCountArgs>(
      args?: Subset<T, MapCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MapCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Map.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MapAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MapAggregateArgs>(args: Subset<T, MapAggregateArgs>): Prisma.PrismaPromise<GetMapAggregateType<T>>

    /**
     * Group by Map.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MapGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MapGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MapGroupByArgs['orderBy'] }
        : { orderBy?: MapGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MapGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMapGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Map.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__MapClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    post<T extends Map$postArgs= {}>(args?: Subset<T, Map$postArgs>): Prisma.PrismaPromise<Array<PostGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Map base type for findUnique actions
   */
  export type MapFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Map
     */
    select?: MapSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MapInclude | null
    /**
     * Filter, which Map to fetch.
     */
    where: MapWhereUniqueInput
  }

  /**
   * Map findUnique
   */
  export interface MapFindUniqueArgs extends MapFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Map findUniqueOrThrow
   */
  export type MapFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Map
     */
    select?: MapSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MapInclude | null
    /**
     * Filter, which Map to fetch.
     */
    where: MapWhereUniqueInput
  }


  /**
   * Map base type for findFirst actions
   */
  export type MapFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Map
     */
    select?: MapSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MapInclude | null
    /**
     * Filter, which Map to fetch.
     */
    where?: MapWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Maps to fetch.
     */
    orderBy?: Enumerable<MapOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Maps.
     */
    cursor?: MapWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Maps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Maps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Maps.
     */
    distinct?: Enumerable<MapScalarFieldEnum>
  }

  /**
   * Map findFirst
   */
  export interface MapFindFirstArgs extends MapFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Map findFirstOrThrow
   */
  export type MapFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Map
     */
    select?: MapSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MapInclude | null
    /**
     * Filter, which Map to fetch.
     */
    where?: MapWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Maps to fetch.
     */
    orderBy?: Enumerable<MapOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Maps.
     */
    cursor?: MapWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Maps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Maps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Maps.
     */
    distinct?: Enumerable<MapScalarFieldEnum>
  }


  /**
   * Map findMany
   */
  export type MapFindManyArgs = {
    /**
     * Select specific fields to fetch from the Map
     */
    select?: MapSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MapInclude | null
    /**
     * Filter, which Maps to fetch.
     */
    where?: MapWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Maps to fetch.
     */
    orderBy?: Enumerable<MapOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Maps.
     */
    cursor?: MapWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Maps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Maps.
     */
    skip?: number
    distinct?: Enumerable<MapScalarFieldEnum>
  }


  /**
   * Map create
   */
  export type MapCreateArgs = {
    /**
     * Select specific fields to fetch from the Map
     */
    select?: MapSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MapInclude | null
    /**
     * The data needed to create a Map.
     */
    data: XOR<MapCreateInput, MapUncheckedCreateInput>
  }


  /**
   * Map createMany
   */
  export type MapCreateManyArgs = {
    /**
     * The data used to create many Maps.
     */
    data: Enumerable<MapCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Map update
   */
  export type MapUpdateArgs = {
    /**
     * Select specific fields to fetch from the Map
     */
    select?: MapSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MapInclude | null
    /**
     * The data needed to update a Map.
     */
    data: XOR<MapUpdateInput, MapUncheckedUpdateInput>
    /**
     * Choose, which Map to update.
     */
    where: MapWhereUniqueInput
  }


  /**
   * Map updateMany
   */
  export type MapUpdateManyArgs = {
    /**
     * The data used to update Maps.
     */
    data: XOR<MapUpdateManyMutationInput, MapUncheckedUpdateManyInput>
    /**
     * Filter which Maps to update
     */
    where?: MapWhereInput
  }


  /**
   * Map upsert
   */
  export type MapUpsertArgs = {
    /**
     * Select specific fields to fetch from the Map
     */
    select?: MapSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MapInclude | null
    /**
     * The filter to search for the Map to update in case it exists.
     */
    where: MapWhereUniqueInput
    /**
     * In case the Map found by the `where` argument doesn't exist, create a new Map with this data.
     */
    create: XOR<MapCreateInput, MapUncheckedCreateInput>
    /**
     * In case the Map was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MapUpdateInput, MapUncheckedUpdateInput>
  }


  /**
   * Map delete
   */
  export type MapDeleteArgs = {
    /**
     * Select specific fields to fetch from the Map
     */
    select?: MapSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MapInclude | null
    /**
     * Filter which Map to delete.
     */
    where: MapWhereUniqueInput
  }


  /**
   * Map deleteMany
   */
  export type MapDeleteManyArgs = {
    /**
     * Filter which Maps to delete
     */
    where?: MapWhereInput
  }


  /**
   * Map.post
   */
  export type Map$postArgs = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostInclude | null
    where?: PostWhereInput
    orderBy?: Enumerable<PostOrderByWithRelationInput>
    cursor?: PostWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<PostScalarFieldEnum>
  }


  /**
   * Map without action
   */
  export type MapArgs = {
    /**
     * Select specific fields to fetch from the Map
     */
    select?: MapSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MapInclude | null
  }



  /**
   * Model Post
   */


  export type AggregatePost = {
    _count: PostCountAggregateOutputType | null
    _avg: PostAvgAggregateOutputType | null
    _sum: PostSumAggregateOutputType | null
    _min: PostMinAggregateOutputType | null
    _max: PostMaxAggregateOutputType | null
  }

  export type PostAvgAggregateOutputType = {
    id: number | null
    map_id: number | null
  }

  export type PostSumAggregateOutputType = {
    id: number | null
    map_id: number | null
  }

  export type PostMinAggregateOutputType = {
    id: number | null
    title: string | null
    info: string | null
    src_url: string | null
    createdAt: Date | null
    map_id: number | null
  }

  export type PostMaxAggregateOutputType = {
    id: number | null
    title: string | null
    info: string | null
    src_url: string | null
    createdAt: Date | null
    map_id: number | null
  }

  export type PostCountAggregateOutputType = {
    id: number
    title: number
    info: number
    src_url: number
    createdAt: number
    map_id: number
    _all: number
  }


  export type PostAvgAggregateInputType = {
    id?: true
    map_id?: true
  }

  export type PostSumAggregateInputType = {
    id?: true
    map_id?: true
  }

  export type PostMinAggregateInputType = {
    id?: true
    title?: true
    info?: true
    src_url?: true
    createdAt?: true
    map_id?: true
  }

  export type PostMaxAggregateInputType = {
    id?: true
    title?: true
    info?: true
    src_url?: true
    createdAt?: true
    map_id?: true
  }

  export type PostCountAggregateInputType = {
    id?: true
    title?: true
    info?: true
    src_url?: true
    createdAt?: true
    map_id?: true
    _all?: true
  }

  export type PostAggregateArgs = {
    /**
     * Filter which Post to aggregate.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: Enumerable<PostOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Posts
    **/
    _count?: true | PostCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PostAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PostSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PostMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PostMaxAggregateInputType
  }

  export type GetPostAggregateType<T extends PostAggregateArgs> = {
        [P in keyof T & keyof AggregatePost]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePost[P]>
      : GetScalarType<T[P], AggregatePost[P]>
  }




  export type PostGroupByArgs = {
    where?: PostWhereInput
    orderBy?: Enumerable<PostOrderByWithAggregationInput>
    by: PostScalarFieldEnum[]
    having?: PostScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PostCountAggregateInputType | true
    _avg?: PostAvgAggregateInputType
    _sum?: PostSumAggregateInputType
    _min?: PostMinAggregateInputType
    _max?: PostMaxAggregateInputType
  }


  export type PostGroupByOutputType = {
    id: number
    title: string
    info: string
    src_url: string | null
    createdAt: Date
    map_id: number
    _count: PostCountAggregateOutputType | null
    _avg: PostAvgAggregateOutputType | null
    _sum: PostSumAggregateOutputType | null
    _min: PostMinAggregateOutputType | null
    _max: PostMaxAggregateOutputType | null
  }

  type GetPostGroupByPayload<T extends PostGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<PostGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PostGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PostGroupByOutputType[P]>
            : GetScalarType<T[P], PostGroupByOutputType[P]>
        }
      >
    >


  export type PostSelect = {
    id?: boolean
    title?: boolean
    info?: boolean
    src_url?: boolean
    createdAt?: boolean
    map_id?: boolean
    map?: boolean | MapArgs
    postlike?: boolean | Post$postlikeArgs
    postcomment?: boolean | Post$postcommentArgs
    chat?: boolean | Post$chatArgs
    search?: boolean | Post$searchArgs
    profile?: boolean | Post$profileArgs
    _count?: boolean | PostCountOutputTypeArgs
  }


  export type PostInclude = {
    map?: boolean | MapArgs
    postlike?: boolean | Post$postlikeArgs
    postcomment?: boolean | Post$postcommentArgs
    chat?: boolean | Post$chatArgs
    search?: boolean | Post$searchArgs
    profile?: boolean | Post$profileArgs
    _count?: boolean | PostCountOutputTypeArgs
  }

  export type PostGetPayload<S extends boolean | null | undefined | PostArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Post :
    S extends undefined ? never :
    S extends { include: any } & (PostArgs | PostFindManyArgs)
    ? Post  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'map' ? MapGetPayload<S['include'][P]> :
        P extends 'postlike' ? Array < PostLikeGetPayload<S['include'][P]>>  :
        P extends 'postcomment' ? Array < Post_CommentGetPayload<S['include'][P]>>  :
        P extends 'chat' ? Array < ChatGetPayload<S['include'][P]>>  :
        P extends 'search' ? Array < SearchGetPayload<S['include'][P]>>  :
        P extends 'profile' ? Array < ProfileGetPayload<S['include'][P]>>  :
        P extends '_count' ? PostCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (PostArgs | PostFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'map' ? MapGetPayload<S['select'][P]> :
        P extends 'postlike' ? Array < PostLikeGetPayload<S['select'][P]>>  :
        P extends 'postcomment' ? Array < Post_CommentGetPayload<S['select'][P]>>  :
        P extends 'chat' ? Array < ChatGetPayload<S['select'][P]>>  :
        P extends 'search' ? Array < SearchGetPayload<S['select'][P]>>  :
        P extends 'profile' ? Array < ProfileGetPayload<S['select'][P]>>  :
        P extends '_count' ? PostCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Post ? Post[P] : never
  } 
      : Post


  type PostCountArgs = 
    Omit<PostFindManyArgs, 'select' | 'include'> & {
      select?: PostCountAggregateInputType | true
    }

  export interface PostDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Post that matches the filter.
     * @param {PostFindUniqueArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PostFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PostFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Post'> extends True ? Prisma__PostClient<PostGetPayload<T>> : Prisma__PostClient<PostGetPayload<T> | null, null>

    /**
     * Find one Post that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PostFindUniqueOrThrowArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PostFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, PostFindUniqueOrThrowArgs>
    ): Prisma__PostClient<PostGetPayload<T>>

    /**
     * Find the first Post that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindFirstArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PostFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PostFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Post'> extends True ? Prisma__PostClient<PostGetPayload<T>> : Prisma__PostClient<PostGetPayload<T> | null, null>

    /**
     * Find the first Post that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindFirstOrThrowArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PostFindFirstOrThrowArgs>(
      args?: SelectSubset<T, PostFindFirstOrThrowArgs>
    ): Prisma__PostClient<PostGetPayload<T>>

    /**
     * Find zero or more Posts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Posts
     * const posts = await prisma.post.findMany()
     * 
     * // Get first 10 Posts
     * const posts = await prisma.post.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const postWithIdOnly = await prisma.post.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PostFindManyArgs>(
      args?: SelectSubset<T, PostFindManyArgs>
    ): Prisma.PrismaPromise<Array<PostGetPayload<T>>>

    /**
     * Create a Post.
     * @param {PostCreateArgs} args - Arguments to create a Post.
     * @example
     * // Create one Post
     * const Post = await prisma.post.create({
     *   data: {
     *     // ... data to create a Post
     *   }
     * })
     * 
    **/
    create<T extends PostCreateArgs>(
      args: SelectSubset<T, PostCreateArgs>
    ): Prisma__PostClient<PostGetPayload<T>>

    /**
     * Create many Posts.
     *     @param {PostCreateManyArgs} args - Arguments to create many Posts.
     *     @example
     *     // Create many Posts
     *     const post = await prisma.post.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PostCreateManyArgs>(
      args?: SelectSubset<T, PostCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Post.
     * @param {PostDeleteArgs} args - Arguments to delete one Post.
     * @example
     * // Delete one Post
     * const Post = await prisma.post.delete({
     *   where: {
     *     // ... filter to delete one Post
     *   }
     * })
     * 
    **/
    delete<T extends PostDeleteArgs>(
      args: SelectSubset<T, PostDeleteArgs>
    ): Prisma__PostClient<PostGetPayload<T>>

    /**
     * Update one Post.
     * @param {PostUpdateArgs} args - Arguments to update one Post.
     * @example
     * // Update one Post
     * const post = await prisma.post.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PostUpdateArgs>(
      args: SelectSubset<T, PostUpdateArgs>
    ): Prisma__PostClient<PostGetPayload<T>>

    /**
     * Delete zero or more Posts.
     * @param {PostDeleteManyArgs} args - Arguments to filter Posts to delete.
     * @example
     * // Delete a few Posts
     * const { count } = await prisma.post.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PostDeleteManyArgs>(
      args?: SelectSubset<T, PostDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Posts
     * const post = await prisma.post.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PostUpdateManyArgs>(
      args: SelectSubset<T, PostUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Post.
     * @param {PostUpsertArgs} args - Arguments to update or create a Post.
     * @example
     * // Update or create a Post
     * const post = await prisma.post.upsert({
     *   create: {
     *     // ... data to create a Post
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Post we want to update
     *   }
     * })
    **/
    upsert<T extends PostUpsertArgs>(
      args: SelectSubset<T, PostUpsertArgs>
    ): Prisma__PostClient<PostGetPayload<T>>

    /**
     * Count the number of Posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostCountArgs} args - Arguments to filter Posts to count.
     * @example
     * // Count the number of Posts
     * const count = await prisma.post.count({
     *   where: {
     *     // ... the filter for the Posts we want to count
     *   }
     * })
    **/
    count<T extends PostCountArgs>(
      args?: Subset<T, PostCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PostCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Post.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PostAggregateArgs>(args: Subset<T, PostAggregateArgs>): Prisma.PrismaPromise<GetPostAggregateType<T>>

    /**
     * Group by Post.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PostGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PostGroupByArgs['orderBy'] }
        : { orderBy?: PostGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PostGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPostGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Post.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PostClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    map<T extends MapArgs= {}>(args?: Subset<T, MapArgs>): Prisma__MapClient<MapGetPayload<T> | Null>;

    postlike<T extends Post$postlikeArgs= {}>(args?: Subset<T, Post$postlikeArgs>): Prisma.PrismaPromise<Array<PostLikeGetPayload<T>>| Null>;

    postcomment<T extends Post$postcommentArgs= {}>(args?: Subset<T, Post$postcommentArgs>): Prisma.PrismaPromise<Array<Post_CommentGetPayload<T>>| Null>;

    chat<T extends Post$chatArgs= {}>(args?: Subset<T, Post$chatArgs>): Prisma.PrismaPromise<Array<ChatGetPayload<T>>| Null>;

    search<T extends Post$searchArgs= {}>(args?: Subset<T, Post$searchArgs>): Prisma.PrismaPromise<Array<SearchGetPayload<T>>| Null>;

    profile<T extends Post$profileArgs= {}>(args?: Subset<T, Post$profileArgs>): Prisma.PrismaPromise<Array<ProfileGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Post base type for findUnique actions
   */
  export type PostFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostInclude | null
    /**
     * Filter, which Post to fetch.
     */
    where: PostWhereUniqueInput
  }

  /**
   * Post findUnique
   */
  export interface PostFindUniqueArgs extends PostFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Post findUniqueOrThrow
   */
  export type PostFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostInclude | null
    /**
     * Filter, which Post to fetch.
     */
    where: PostWhereUniqueInput
  }


  /**
   * Post base type for findFirst actions
   */
  export type PostFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostInclude | null
    /**
     * Filter, which Post to fetch.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: Enumerable<PostOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Posts.
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Posts.
     */
    distinct?: Enumerable<PostScalarFieldEnum>
  }

  /**
   * Post findFirst
   */
  export interface PostFindFirstArgs extends PostFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Post findFirstOrThrow
   */
  export type PostFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostInclude | null
    /**
     * Filter, which Post to fetch.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: Enumerable<PostOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Posts.
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Posts.
     */
    distinct?: Enumerable<PostScalarFieldEnum>
  }


  /**
   * Post findMany
   */
  export type PostFindManyArgs = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostInclude | null
    /**
     * Filter, which Posts to fetch.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: Enumerable<PostOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Posts.
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    distinct?: Enumerable<PostScalarFieldEnum>
  }


  /**
   * Post create
   */
  export type PostCreateArgs = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostInclude | null
    /**
     * The data needed to create a Post.
     */
    data: XOR<PostCreateInput, PostUncheckedCreateInput>
  }


  /**
   * Post createMany
   */
  export type PostCreateManyArgs = {
    /**
     * The data used to create many Posts.
     */
    data: Enumerable<PostCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Post update
   */
  export type PostUpdateArgs = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostInclude | null
    /**
     * The data needed to update a Post.
     */
    data: XOR<PostUpdateInput, PostUncheckedUpdateInput>
    /**
     * Choose, which Post to update.
     */
    where: PostWhereUniqueInput
  }


  /**
   * Post updateMany
   */
  export type PostUpdateManyArgs = {
    /**
     * The data used to update Posts.
     */
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyInput>
    /**
     * Filter which Posts to update
     */
    where?: PostWhereInput
  }


  /**
   * Post upsert
   */
  export type PostUpsertArgs = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostInclude | null
    /**
     * The filter to search for the Post to update in case it exists.
     */
    where: PostWhereUniqueInput
    /**
     * In case the Post found by the `where` argument doesn't exist, create a new Post with this data.
     */
    create: XOR<PostCreateInput, PostUncheckedCreateInput>
    /**
     * In case the Post was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PostUpdateInput, PostUncheckedUpdateInput>
  }


  /**
   * Post delete
   */
  export type PostDeleteArgs = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostInclude | null
    /**
     * Filter which Post to delete.
     */
    where: PostWhereUniqueInput
  }


  /**
   * Post deleteMany
   */
  export type PostDeleteManyArgs = {
    /**
     * Filter which Posts to delete
     */
    where?: PostWhereInput
  }


  /**
   * Post.postlike
   */
  export type Post$postlikeArgs = {
    /**
     * Select specific fields to fetch from the PostLike
     */
    select?: PostLikeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostLikeInclude | null
    where?: PostLikeWhereInput
    orderBy?: Enumerable<PostLikeOrderByWithRelationInput>
    cursor?: PostLikeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<PostLikeScalarFieldEnum>
  }


  /**
   * Post.postcomment
   */
  export type Post$postcommentArgs = {
    /**
     * Select specific fields to fetch from the Post_Comment
     */
    select?: Post_CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Post_CommentInclude | null
    where?: Post_CommentWhereInput
    orderBy?: Enumerable<Post_CommentOrderByWithRelationInput>
    cursor?: Post_CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<Post_CommentScalarFieldEnum>
  }


  /**
   * Post.chat
   */
  export type Post$chatArgs = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatInclude | null
    where?: ChatWhereInput
    orderBy?: Enumerable<ChatOrderByWithRelationInput>
    cursor?: ChatWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ChatScalarFieldEnum>
  }


  /**
   * Post.search
   */
  export type Post$searchArgs = {
    /**
     * Select specific fields to fetch from the Search
     */
    select?: SearchSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SearchInclude | null
    where?: SearchWhereInput
    orderBy?: Enumerable<SearchOrderByWithRelationInput>
    cursor?: SearchWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<SearchScalarFieldEnum>
  }


  /**
   * Post.profile
   */
  export type Post$profileArgs = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude | null
    where?: ProfileWhereInput
    orderBy?: Enumerable<ProfileOrderByWithRelationInput>
    cursor?: ProfileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ProfileScalarFieldEnum>
  }


  /**
   * Post without action
   */
  export type PostArgs = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostInclude | null
  }



  /**
   * Model PostLike
   */


  export type AggregatePostLike = {
    _count: PostLikeCountAggregateOutputType | null
    _avg: PostLikeAvgAggregateOutputType | null
    _sum: PostLikeSumAggregateOutputType | null
    _min: PostLikeMinAggregateOutputType | null
    _max: PostLikeMaxAggregateOutputType | null
  }

  export type PostLikeAvgAggregateOutputType = {
    user_id: number | null
    post_id: number | null
  }

  export type PostLikeSumAggregateOutputType = {
    user_id: number | null
    post_id: number | null
  }

  export type PostLikeMinAggregateOutputType = {
    user_id: number | null
    post_id: number | null
  }

  export type PostLikeMaxAggregateOutputType = {
    user_id: number | null
    post_id: number | null
  }

  export type PostLikeCountAggregateOutputType = {
    user_id: number
    post_id: number
    _all: number
  }


  export type PostLikeAvgAggregateInputType = {
    user_id?: true
    post_id?: true
  }

  export type PostLikeSumAggregateInputType = {
    user_id?: true
    post_id?: true
  }

  export type PostLikeMinAggregateInputType = {
    user_id?: true
    post_id?: true
  }

  export type PostLikeMaxAggregateInputType = {
    user_id?: true
    post_id?: true
  }

  export type PostLikeCountAggregateInputType = {
    user_id?: true
    post_id?: true
    _all?: true
  }

  export type PostLikeAggregateArgs = {
    /**
     * Filter which PostLike to aggregate.
     */
    where?: PostLikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostLikes to fetch.
     */
    orderBy?: Enumerable<PostLikeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PostLikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostLikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PostLikes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PostLikes
    **/
    _count?: true | PostLikeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PostLikeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PostLikeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PostLikeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PostLikeMaxAggregateInputType
  }

  export type GetPostLikeAggregateType<T extends PostLikeAggregateArgs> = {
        [P in keyof T & keyof AggregatePostLike]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePostLike[P]>
      : GetScalarType<T[P], AggregatePostLike[P]>
  }




  export type PostLikeGroupByArgs = {
    where?: PostLikeWhereInput
    orderBy?: Enumerable<PostLikeOrderByWithAggregationInput>
    by: PostLikeScalarFieldEnum[]
    having?: PostLikeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PostLikeCountAggregateInputType | true
    _avg?: PostLikeAvgAggregateInputType
    _sum?: PostLikeSumAggregateInputType
    _min?: PostLikeMinAggregateInputType
    _max?: PostLikeMaxAggregateInputType
  }


  export type PostLikeGroupByOutputType = {
    user_id: number
    post_id: number
    _count: PostLikeCountAggregateOutputType | null
    _avg: PostLikeAvgAggregateOutputType | null
    _sum: PostLikeSumAggregateOutputType | null
    _min: PostLikeMinAggregateOutputType | null
    _max: PostLikeMaxAggregateOutputType | null
  }

  type GetPostLikeGroupByPayload<T extends PostLikeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<PostLikeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PostLikeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PostLikeGroupByOutputType[P]>
            : GetScalarType<T[P], PostLikeGroupByOutputType[P]>
        }
      >
    >


  export type PostLikeSelect = {
    user_id?: boolean
    post_id?: boolean
    user?: boolean | UserArgs
    post?: boolean | PostArgs
  }


  export type PostLikeInclude = {
    user?: boolean | UserArgs
    post?: boolean | PostArgs
  }

  export type PostLikeGetPayload<S extends boolean | null | undefined | PostLikeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? PostLike :
    S extends undefined ? never :
    S extends { include: any } & (PostLikeArgs | PostLikeFindManyArgs)
    ? PostLike  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :
        P extends 'post' ? PostGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (PostLikeArgs | PostLikeFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :
        P extends 'post' ? PostGetPayload<S['select'][P]> :  P extends keyof PostLike ? PostLike[P] : never
  } 
      : PostLike


  type PostLikeCountArgs = 
    Omit<PostLikeFindManyArgs, 'select' | 'include'> & {
      select?: PostLikeCountAggregateInputType | true
    }

  export interface PostLikeDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one PostLike that matches the filter.
     * @param {PostLikeFindUniqueArgs} args - Arguments to find a PostLike
     * @example
     * // Get one PostLike
     * const postLike = await prisma.postLike.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PostLikeFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PostLikeFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'PostLike'> extends True ? Prisma__PostLikeClient<PostLikeGetPayload<T>> : Prisma__PostLikeClient<PostLikeGetPayload<T> | null, null>

    /**
     * Find one PostLike that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PostLikeFindUniqueOrThrowArgs} args - Arguments to find a PostLike
     * @example
     * // Get one PostLike
     * const postLike = await prisma.postLike.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PostLikeFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, PostLikeFindUniqueOrThrowArgs>
    ): Prisma__PostLikeClient<PostLikeGetPayload<T>>

    /**
     * Find the first PostLike that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostLikeFindFirstArgs} args - Arguments to find a PostLike
     * @example
     * // Get one PostLike
     * const postLike = await prisma.postLike.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PostLikeFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PostLikeFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'PostLike'> extends True ? Prisma__PostLikeClient<PostLikeGetPayload<T>> : Prisma__PostLikeClient<PostLikeGetPayload<T> | null, null>

    /**
     * Find the first PostLike that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostLikeFindFirstOrThrowArgs} args - Arguments to find a PostLike
     * @example
     * // Get one PostLike
     * const postLike = await prisma.postLike.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PostLikeFindFirstOrThrowArgs>(
      args?: SelectSubset<T, PostLikeFindFirstOrThrowArgs>
    ): Prisma__PostLikeClient<PostLikeGetPayload<T>>

    /**
     * Find zero or more PostLikes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostLikeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PostLikes
     * const postLikes = await prisma.postLike.findMany()
     * 
     * // Get first 10 PostLikes
     * const postLikes = await prisma.postLike.findMany({ take: 10 })
     * 
     * // Only select the `user_id`
     * const postLikeWithUser_idOnly = await prisma.postLike.findMany({ select: { user_id: true } })
     * 
    **/
    findMany<T extends PostLikeFindManyArgs>(
      args?: SelectSubset<T, PostLikeFindManyArgs>
    ): Prisma.PrismaPromise<Array<PostLikeGetPayload<T>>>

    /**
     * Create a PostLike.
     * @param {PostLikeCreateArgs} args - Arguments to create a PostLike.
     * @example
     * // Create one PostLike
     * const PostLike = await prisma.postLike.create({
     *   data: {
     *     // ... data to create a PostLike
     *   }
     * })
     * 
    **/
    create<T extends PostLikeCreateArgs>(
      args: SelectSubset<T, PostLikeCreateArgs>
    ): Prisma__PostLikeClient<PostLikeGetPayload<T>>

    /**
     * Create many PostLikes.
     *     @param {PostLikeCreateManyArgs} args - Arguments to create many PostLikes.
     *     @example
     *     // Create many PostLikes
     *     const postLike = await prisma.postLike.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PostLikeCreateManyArgs>(
      args?: SelectSubset<T, PostLikeCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PostLike.
     * @param {PostLikeDeleteArgs} args - Arguments to delete one PostLike.
     * @example
     * // Delete one PostLike
     * const PostLike = await prisma.postLike.delete({
     *   where: {
     *     // ... filter to delete one PostLike
     *   }
     * })
     * 
    **/
    delete<T extends PostLikeDeleteArgs>(
      args: SelectSubset<T, PostLikeDeleteArgs>
    ): Prisma__PostLikeClient<PostLikeGetPayload<T>>

    /**
     * Update one PostLike.
     * @param {PostLikeUpdateArgs} args - Arguments to update one PostLike.
     * @example
     * // Update one PostLike
     * const postLike = await prisma.postLike.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PostLikeUpdateArgs>(
      args: SelectSubset<T, PostLikeUpdateArgs>
    ): Prisma__PostLikeClient<PostLikeGetPayload<T>>

    /**
     * Delete zero or more PostLikes.
     * @param {PostLikeDeleteManyArgs} args - Arguments to filter PostLikes to delete.
     * @example
     * // Delete a few PostLikes
     * const { count } = await prisma.postLike.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PostLikeDeleteManyArgs>(
      args?: SelectSubset<T, PostLikeDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PostLikes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostLikeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PostLikes
     * const postLike = await prisma.postLike.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PostLikeUpdateManyArgs>(
      args: SelectSubset<T, PostLikeUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PostLike.
     * @param {PostLikeUpsertArgs} args - Arguments to update or create a PostLike.
     * @example
     * // Update or create a PostLike
     * const postLike = await prisma.postLike.upsert({
     *   create: {
     *     // ... data to create a PostLike
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PostLike we want to update
     *   }
     * })
    **/
    upsert<T extends PostLikeUpsertArgs>(
      args: SelectSubset<T, PostLikeUpsertArgs>
    ): Prisma__PostLikeClient<PostLikeGetPayload<T>>

    /**
     * Count the number of PostLikes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostLikeCountArgs} args - Arguments to filter PostLikes to count.
     * @example
     * // Count the number of PostLikes
     * const count = await prisma.postLike.count({
     *   where: {
     *     // ... the filter for the PostLikes we want to count
     *   }
     * })
    **/
    count<T extends PostLikeCountArgs>(
      args?: Subset<T, PostLikeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PostLikeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PostLike.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostLikeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PostLikeAggregateArgs>(args: Subset<T, PostLikeAggregateArgs>): Prisma.PrismaPromise<GetPostLikeAggregateType<T>>

    /**
     * Group by PostLike.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostLikeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PostLikeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PostLikeGroupByArgs['orderBy'] }
        : { orderBy?: PostLikeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PostLikeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPostLikeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for PostLike.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PostLikeClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    post<T extends PostArgs= {}>(args?: Subset<T, PostArgs>): Prisma__PostClient<PostGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * PostLike base type for findUnique actions
   */
  export type PostLikeFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the PostLike
     */
    select?: PostLikeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostLikeInclude | null
    /**
     * Filter, which PostLike to fetch.
     */
    where: PostLikeWhereUniqueInput
  }

  /**
   * PostLike findUnique
   */
  export interface PostLikeFindUniqueArgs extends PostLikeFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * PostLike findUniqueOrThrow
   */
  export type PostLikeFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the PostLike
     */
    select?: PostLikeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostLikeInclude | null
    /**
     * Filter, which PostLike to fetch.
     */
    where: PostLikeWhereUniqueInput
  }


  /**
   * PostLike base type for findFirst actions
   */
  export type PostLikeFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the PostLike
     */
    select?: PostLikeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostLikeInclude | null
    /**
     * Filter, which PostLike to fetch.
     */
    where?: PostLikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostLikes to fetch.
     */
    orderBy?: Enumerable<PostLikeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PostLikes.
     */
    cursor?: PostLikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostLikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PostLikes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PostLikes.
     */
    distinct?: Enumerable<PostLikeScalarFieldEnum>
  }

  /**
   * PostLike findFirst
   */
  export interface PostLikeFindFirstArgs extends PostLikeFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * PostLike findFirstOrThrow
   */
  export type PostLikeFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the PostLike
     */
    select?: PostLikeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostLikeInclude | null
    /**
     * Filter, which PostLike to fetch.
     */
    where?: PostLikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostLikes to fetch.
     */
    orderBy?: Enumerable<PostLikeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PostLikes.
     */
    cursor?: PostLikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostLikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PostLikes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PostLikes.
     */
    distinct?: Enumerable<PostLikeScalarFieldEnum>
  }


  /**
   * PostLike findMany
   */
  export type PostLikeFindManyArgs = {
    /**
     * Select specific fields to fetch from the PostLike
     */
    select?: PostLikeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostLikeInclude | null
    /**
     * Filter, which PostLikes to fetch.
     */
    where?: PostLikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostLikes to fetch.
     */
    orderBy?: Enumerable<PostLikeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PostLikes.
     */
    cursor?: PostLikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostLikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PostLikes.
     */
    skip?: number
    distinct?: Enumerable<PostLikeScalarFieldEnum>
  }


  /**
   * PostLike create
   */
  export type PostLikeCreateArgs = {
    /**
     * Select specific fields to fetch from the PostLike
     */
    select?: PostLikeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostLikeInclude | null
    /**
     * The data needed to create a PostLike.
     */
    data: XOR<PostLikeCreateInput, PostLikeUncheckedCreateInput>
  }


  /**
   * PostLike createMany
   */
  export type PostLikeCreateManyArgs = {
    /**
     * The data used to create many PostLikes.
     */
    data: Enumerable<PostLikeCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * PostLike update
   */
  export type PostLikeUpdateArgs = {
    /**
     * Select specific fields to fetch from the PostLike
     */
    select?: PostLikeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostLikeInclude | null
    /**
     * The data needed to update a PostLike.
     */
    data: XOR<PostLikeUpdateInput, PostLikeUncheckedUpdateInput>
    /**
     * Choose, which PostLike to update.
     */
    where: PostLikeWhereUniqueInput
  }


  /**
   * PostLike updateMany
   */
  export type PostLikeUpdateManyArgs = {
    /**
     * The data used to update PostLikes.
     */
    data: XOR<PostLikeUpdateManyMutationInput, PostLikeUncheckedUpdateManyInput>
    /**
     * Filter which PostLikes to update
     */
    where?: PostLikeWhereInput
  }


  /**
   * PostLike upsert
   */
  export type PostLikeUpsertArgs = {
    /**
     * Select specific fields to fetch from the PostLike
     */
    select?: PostLikeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostLikeInclude | null
    /**
     * The filter to search for the PostLike to update in case it exists.
     */
    where: PostLikeWhereUniqueInput
    /**
     * In case the PostLike found by the `where` argument doesn't exist, create a new PostLike with this data.
     */
    create: XOR<PostLikeCreateInput, PostLikeUncheckedCreateInput>
    /**
     * In case the PostLike was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PostLikeUpdateInput, PostLikeUncheckedUpdateInput>
  }


  /**
   * PostLike delete
   */
  export type PostLikeDeleteArgs = {
    /**
     * Select specific fields to fetch from the PostLike
     */
    select?: PostLikeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostLikeInclude | null
    /**
     * Filter which PostLike to delete.
     */
    where: PostLikeWhereUniqueInput
  }


  /**
   * PostLike deleteMany
   */
  export type PostLikeDeleteManyArgs = {
    /**
     * Filter which PostLikes to delete
     */
    where?: PostLikeWhereInput
  }


  /**
   * PostLike without action
   */
  export type PostLikeArgs = {
    /**
     * Select specific fields to fetch from the PostLike
     */
    select?: PostLikeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostLikeInclude | null
  }



  /**
   * Model Post_Comment
   */


  export type AggregatePost_Comment = {
    _count: Post_CommentCountAggregateOutputType | null
    _avg: Post_CommentAvgAggregateOutputType | null
    _sum: Post_CommentSumAggregateOutputType | null
    _min: Post_CommentMinAggregateOutputType | null
    _max: Post_CommentMaxAggregateOutputType | null
  }

  export type Post_CommentAvgAggregateOutputType = {
    id: number | null
    star: number | null
    post_id: number | null
    user_id: number | null
  }

  export type Post_CommentSumAggregateOutputType = {
    id: number | null
    star: number | null
    post_id: number | null
    user_id: number | null
  }

  export type Post_CommentMinAggregateOutputType = {
    id: number | null
    content: string | null
    star: number | null
    createdAt: Date | null
    post_id: number | null
    user_id: number | null
  }

  export type Post_CommentMaxAggregateOutputType = {
    id: number | null
    content: string | null
    star: number | null
    createdAt: Date | null
    post_id: number | null
    user_id: number | null
  }

  export type Post_CommentCountAggregateOutputType = {
    id: number
    content: number
    star: number
    createdAt: number
    post_id: number
    user_id: number
    _all: number
  }


  export type Post_CommentAvgAggregateInputType = {
    id?: true
    star?: true
    post_id?: true
    user_id?: true
  }

  export type Post_CommentSumAggregateInputType = {
    id?: true
    star?: true
    post_id?: true
    user_id?: true
  }

  export type Post_CommentMinAggregateInputType = {
    id?: true
    content?: true
    star?: true
    createdAt?: true
    post_id?: true
    user_id?: true
  }

  export type Post_CommentMaxAggregateInputType = {
    id?: true
    content?: true
    star?: true
    createdAt?: true
    post_id?: true
    user_id?: true
  }

  export type Post_CommentCountAggregateInputType = {
    id?: true
    content?: true
    star?: true
    createdAt?: true
    post_id?: true
    user_id?: true
    _all?: true
  }

  export type Post_CommentAggregateArgs = {
    /**
     * Filter which Post_Comment to aggregate.
     */
    where?: Post_CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Post_Comments to fetch.
     */
    orderBy?: Enumerable<Post_CommentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Post_CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Post_Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Post_Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Post_Comments
    **/
    _count?: true | Post_CommentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Post_CommentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Post_CommentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Post_CommentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Post_CommentMaxAggregateInputType
  }

  export type GetPost_CommentAggregateType<T extends Post_CommentAggregateArgs> = {
        [P in keyof T & keyof AggregatePost_Comment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePost_Comment[P]>
      : GetScalarType<T[P], AggregatePost_Comment[P]>
  }




  export type Post_CommentGroupByArgs = {
    where?: Post_CommentWhereInput
    orderBy?: Enumerable<Post_CommentOrderByWithAggregationInput>
    by: Post_CommentScalarFieldEnum[]
    having?: Post_CommentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Post_CommentCountAggregateInputType | true
    _avg?: Post_CommentAvgAggregateInputType
    _sum?: Post_CommentSumAggregateInputType
    _min?: Post_CommentMinAggregateInputType
    _max?: Post_CommentMaxAggregateInputType
  }


  export type Post_CommentGroupByOutputType = {
    id: number
    content: string
    star: number
    createdAt: Date
    post_id: number
    user_id: number
    _count: Post_CommentCountAggregateOutputType | null
    _avg: Post_CommentAvgAggregateOutputType | null
    _sum: Post_CommentSumAggregateOutputType | null
    _min: Post_CommentMinAggregateOutputType | null
    _max: Post_CommentMaxAggregateOutputType | null
  }

  type GetPost_CommentGroupByPayload<T extends Post_CommentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<Post_CommentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Post_CommentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Post_CommentGroupByOutputType[P]>
            : GetScalarType<T[P], Post_CommentGroupByOutputType[P]>
        }
      >
    >


  export type Post_CommentSelect = {
    id?: boolean
    content?: boolean
    star?: boolean
    createdAt?: boolean
    post_id?: boolean
    user_id?: boolean
    post?: boolean | PostArgs
    user?: boolean | UserArgs
    profile?: boolean | Post_Comment$profileArgs
    _count?: boolean | Post_CommentCountOutputTypeArgs
  }


  export type Post_CommentInclude = {
    post?: boolean | PostArgs
    user?: boolean | UserArgs
    profile?: boolean | Post_Comment$profileArgs
    _count?: boolean | Post_CommentCountOutputTypeArgs
  }

  export type Post_CommentGetPayload<S extends boolean | null | undefined | Post_CommentArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Post_Comment :
    S extends undefined ? never :
    S extends { include: any } & (Post_CommentArgs | Post_CommentFindManyArgs)
    ? Post_Comment  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'post' ? PostGetPayload<S['include'][P]> :
        P extends 'user' ? UserGetPayload<S['include'][P]> :
        P extends 'profile' ? Array < ProfileGetPayload<S['include'][P]>>  :
        P extends '_count' ? Post_CommentCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (Post_CommentArgs | Post_CommentFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'post' ? PostGetPayload<S['select'][P]> :
        P extends 'user' ? UserGetPayload<S['select'][P]> :
        P extends 'profile' ? Array < ProfileGetPayload<S['select'][P]>>  :
        P extends '_count' ? Post_CommentCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Post_Comment ? Post_Comment[P] : never
  } 
      : Post_Comment


  type Post_CommentCountArgs = 
    Omit<Post_CommentFindManyArgs, 'select' | 'include'> & {
      select?: Post_CommentCountAggregateInputType | true
    }

  export interface Post_CommentDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Post_Comment that matches the filter.
     * @param {Post_CommentFindUniqueArgs} args - Arguments to find a Post_Comment
     * @example
     * // Get one Post_Comment
     * const post_Comment = await prisma.post_Comment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Post_CommentFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, Post_CommentFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Post_Comment'> extends True ? Prisma__Post_CommentClient<Post_CommentGetPayload<T>> : Prisma__Post_CommentClient<Post_CommentGetPayload<T> | null, null>

    /**
     * Find one Post_Comment that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {Post_CommentFindUniqueOrThrowArgs} args - Arguments to find a Post_Comment
     * @example
     * // Get one Post_Comment
     * const post_Comment = await prisma.post_Comment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends Post_CommentFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, Post_CommentFindUniqueOrThrowArgs>
    ): Prisma__Post_CommentClient<Post_CommentGetPayload<T>>

    /**
     * Find the first Post_Comment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Post_CommentFindFirstArgs} args - Arguments to find a Post_Comment
     * @example
     * // Get one Post_Comment
     * const post_Comment = await prisma.post_Comment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Post_CommentFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, Post_CommentFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Post_Comment'> extends True ? Prisma__Post_CommentClient<Post_CommentGetPayload<T>> : Prisma__Post_CommentClient<Post_CommentGetPayload<T> | null, null>

    /**
     * Find the first Post_Comment that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Post_CommentFindFirstOrThrowArgs} args - Arguments to find a Post_Comment
     * @example
     * // Get one Post_Comment
     * const post_Comment = await prisma.post_Comment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends Post_CommentFindFirstOrThrowArgs>(
      args?: SelectSubset<T, Post_CommentFindFirstOrThrowArgs>
    ): Prisma__Post_CommentClient<Post_CommentGetPayload<T>>

    /**
     * Find zero or more Post_Comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Post_CommentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Post_Comments
     * const post_Comments = await prisma.post_Comment.findMany()
     * 
     * // Get first 10 Post_Comments
     * const post_Comments = await prisma.post_Comment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const post_CommentWithIdOnly = await prisma.post_Comment.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends Post_CommentFindManyArgs>(
      args?: SelectSubset<T, Post_CommentFindManyArgs>
    ): Prisma.PrismaPromise<Array<Post_CommentGetPayload<T>>>

    /**
     * Create a Post_Comment.
     * @param {Post_CommentCreateArgs} args - Arguments to create a Post_Comment.
     * @example
     * // Create one Post_Comment
     * const Post_Comment = await prisma.post_Comment.create({
     *   data: {
     *     // ... data to create a Post_Comment
     *   }
     * })
     * 
    **/
    create<T extends Post_CommentCreateArgs>(
      args: SelectSubset<T, Post_CommentCreateArgs>
    ): Prisma__Post_CommentClient<Post_CommentGetPayload<T>>

    /**
     * Create many Post_Comments.
     *     @param {Post_CommentCreateManyArgs} args - Arguments to create many Post_Comments.
     *     @example
     *     // Create many Post_Comments
     *     const post_Comment = await prisma.post_Comment.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends Post_CommentCreateManyArgs>(
      args?: SelectSubset<T, Post_CommentCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Post_Comment.
     * @param {Post_CommentDeleteArgs} args - Arguments to delete one Post_Comment.
     * @example
     * // Delete one Post_Comment
     * const Post_Comment = await prisma.post_Comment.delete({
     *   where: {
     *     // ... filter to delete one Post_Comment
     *   }
     * })
     * 
    **/
    delete<T extends Post_CommentDeleteArgs>(
      args: SelectSubset<T, Post_CommentDeleteArgs>
    ): Prisma__Post_CommentClient<Post_CommentGetPayload<T>>

    /**
     * Update one Post_Comment.
     * @param {Post_CommentUpdateArgs} args - Arguments to update one Post_Comment.
     * @example
     * // Update one Post_Comment
     * const post_Comment = await prisma.post_Comment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Post_CommentUpdateArgs>(
      args: SelectSubset<T, Post_CommentUpdateArgs>
    ): Prisma__Post_CommentClient<Post_CommentGetPayload<T>>

    /**
     * Delete zero or more Post_Comments.
     * @param {Post_CommentDeleteManyArgs} args - Arguments to filter Post_Comments to delete.
     * @example
     * // Delete a few Post_Comments
     * const { count } = await prisma.post_Comment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Post_CommentDeleteManyArgs>(
      args?: SelectSubset<T, Post_CommentDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Post_Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Post_CommentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Post_Comments
     * const post_Comment = await prisma.post_Comment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Post_CommentUpdateManyArgs>(
      args: SelectSubset<T, Post_CommentUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Post_Comment.
     * @param {Post_CommentUpsertArgs} args - Arguments to update or create a Post_Comment.
     * @example
     * // Update or create a Post_Comment
     * const post_Comment = await prisma.post_Comment.upsert({
     *   create: {
     *     // ... data to create a Post_Comment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Post_Comment we want to update
     *   }
     * })
    **/
    upsert<T extends Post_CommentUpsertArgs>(
      args: SelectSubset<T, Post_CommentUpsertArgs>
    ): Prisma__Post_CommentClient<Post_CommentGetPayload<T>>

    /**
     * Count the number of Post_Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Post_CommentCountArgs} args - Arguments to filter Post_Comments to count.
     * @example
     * // Count the number of Post_Comments
     * const count = await prisma.post_Comment.count({
     *   where: {
     *     // ... the filter for the Post_Comments we want to count
     *   }
     * })
    **/
    count<T extends Post_CommentCountArgs>(
      args?: Subset<T, Post_CommentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Post_CommentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Post_Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Post_CommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Post_CommentAggregateArgs>(args: Subset<T, Post_CommentAggregateArgs>): Prisma.PrismaPromise<GetPost_CommentAggregateType<T>>

    /**
     * Group by Post_Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Post_CommentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Post_CommentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Post_CommentGroupByArgs['orderBy'] }
        : { orderBy?: Post_CommentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Post_CommentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPost_CommentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Post_Comment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__Post_CommentClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    post<T extends PostArgs= {}>(args?: Subset<T, PostArgs>): Prisma__PostClient<PostGetPayload<T> | Null>;

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    profile<T extends Post_Comment$profileArgs= {}>(args?: Subset<T, Post_Comment$profileArgs>): Prisma.PrismaPromise<Array<ProfileGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Post_Comment base type for findUnique actions
   */
  export type Post_CommentFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Post_Comment
     */
    select?: Post_CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Post_CommentInclude | null
    /**
     * Filter, which Post_Comment to fetch.
     */
    where: Post_CommentWhereUniqueInput
  }

  /**
   * Post_Comment findUnique
   */
  export interface Post_CommentFindUniqueArgs extends Post_CommentFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Post_Comment findUniqueOrThrow
   */
  export type Post_CommentFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Post_Comment
     */
    select?: Post_CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Post_CommentInclude | null
    /**
     * Filter, which Post_Comment to fetch.
     */
    where: Post_CommentWhereUniqueInput
  }


  /**
   * Post_Comment base type for findFirst actions
   */
  export type Post_CommentFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Post_Comment
     */
    select?: Post_CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Post_CommentInclude | null
    /**
     * Filter, which Post_Comment to fetch.
     */
    where?: Post_CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Post_Comments to fetch.
     */
    orderBy?: Enumerable<Post_CommentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Post_Comments.
     */
    cursor?: Post_CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Post_Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Post_Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Post_Comments.
     */
    distinct?: Enumerable<Post_CommentScalarFieldEnum>
  }

  /**
   * Post_Comment findFirst
   */
  export interface Post_CommentFindFirstArgs extends Post_CommentFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Post_Comment findFirstOrThrow
   */
  export type Post_CommentFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Post_Comment
     */
    select?: Post_CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Post_CommentInclude | null
    /**
     * Filter, which Post_Comment to fetch.
     */
    where?: Post_CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Post_Comments to fetch.
     */
    orderBy?: Enumerable<Post_CommentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Post_Comments.
     */
    cursor?: Post_CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Post_Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Post_Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Post_Comments.
     */
    distinct?: Enumerable<Post_CommentScalarFieldEnum>
  }


  /**
   * Post_Comment findMany
   */
  export type Post_CommentFindManyArgs = {
    /**
     * Select specific fields to fetch from the Post_Comment
     */
    select?: Post_CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Post_CommentInclude | null
    /**
     * Filter, which Post_Comments to fetch.
     */
    where?: Post_CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Post_Comments to fetch.
     */
    orderBy?: Enumerable<Post_CommentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Post_Comments.
     */
    cursor?: Post_CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Post_Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Post_Comments.
     */
    skip?: number
    distinct?: Enumerable<Post_CommentScalarFieldEnum>
  }


  /**
   * Post_Comment create
   */
  export type Post_CommentCreateArgs = {
    /**
     * Select specific fields to fetch from the Post_Comment
     */
    select?: Post_CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Post_CommentInclude | null
    /**
     * The data needed to create a Post_Comment.
     */
    data: XOR<Post_CommentCreateInput, Post_CommentUncheckedCreateInput>
  }


  /**
   * Post_Comment createMany
   */
  export type Post_CommentCreateManyArgs = {
    /**
     * The data used to create many Post_Comments.
     */
    data: Enumerable<Post_CommentCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Post_Comment update
   */
  export type Post_CommentUpdateArgs = {
    /**
     * Select specific fields to fetch from the Post_Comment
     */
    select?: Post_CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Post_CommentInclude | null
    /**
     * The data needed to update a Post_Comment.
     */
    data: XOR<Post_CommentUpdateInput, Post_CommentUncheckedUpdateInput>
    /**
     * Choose, which Post_Comment to update.
     */
    where: Post_CommentWhereUniqueInput
  }


  /**
   * Post_Comment updateMany
   */
  export type Post_CommentUpdateManyArgs = {
    /**
     * The data used to update Post_Comments.
     */
    data: XOR<Post_CommentUpdateManyMutationInput, Post_CommentUncheckedUpdateManyInput>
    /**
     * Filter which Post_Comments to update
     */
    where?: Post_CommentWhereInput
  }


  /**
   * Post_Comment upsert
   */
  export type Post_CommentUpsertArgs = {
    /**
     * Select specific fields to fetch from the Post_Comment
     */
    select?: Post_CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Post_CommentInclude | null
    /**
     * The filter to search for the Post_Comment to update in case it exists.
     */
    where: Post_CommentWhereUniqueInput
    /**
     * In case the Post_Comment found by the `where` argument doesn't exist, create a new Post_Comment with this data.
     */
    create: XOR<Post_CommentCreateInput, Post_CommentUncheckedCreateInput>
    /**
     * In case the Post_Comment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Post_CommentUpdateInput, Post_CommentUncheckedUpdateInput>
  }


  /**
   * Post_Comment delete
   */
  export type Post_CommentDeleteArgs = {
    /**
     * Select specific fields to fetch from the Post_Comment
     */
    select?: Post_CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Post_CommentInclude | null
    /**
     * Filter which Post_Comment to delete.
     */
    where: Post_CommentWhereUniqueInput
  }


  /**
   * Post_Comment deleteMany
   */
  export type Post_CommentDeleteManyArgs = {
    /**
     * Filter which Post_Comments to delete
     */
    where?: Post_CommentWhereInput
  }


  /**
   * Post_Comment.profile
   */
  export type Post_Comment$profileArgs = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude | null
    where?: ProfileWhereInput
    orderBy?: Enumerable<ProfileOrderByWithRelationInput>
    cursor?: ProfileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ProfileScalarFieldEnum>
  }


  /**
   * Post_Comment without action
   */
  export type Post_CommentArgs = {
    /**
     * Select specific fields to fetch from the Post_Comment
     */
    select?: Post_CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Post_CommentInclude | null
  }



  /**
   * Model Chat
   */


  export type AggregateChat = {
    _count: ChatCountAggregateOutputType | null
    _avg: ChatAvgAggregateOutputType | null
    _sum: ChatSumAggregateOutputType | null
    _min: ChatMinAggregateOutputType | null
    _max: ChatMaxAggregateOutputType | null
  }

  export type ChatAvgAggregateOutputType = {
    id: number | null
    post_id: number | null
    user_id: number | null
  }

  export type ChatSumAggregateOutputType = {
    id: number | null
    post_id: number | null
    user_id: number | null
  }

  export type ChatMinAggregateOutputType = {
    id: number | null
    message: string | null
    post_id: number | null
    user_id: number | null
  }

  export type ChatMaxAggregateOutputType = {
    id: number | null
    message: string | null
    post_id: number | null
    user_id: number | null
  }

  export type ChatCountAggregateOutputType = {
    id: number
    message: number
    post_id: number
    user_id: number
    _all: number
  }


  export type ChatAvgAggregateInputType = {
    id?: true
    post_id?: true
    user_id?: true
  }

  export type ChatSumAggregateInputType = {
    id?: true
    post_id?: true
    user_id?: true
  }

  export type ChatMinAggregateInputType = {
    id?: true
    message?: true
    post_id?: true
    user_id?: true
  }

  export type ChatMaxAggregateInputType = {
    id?: true
    message?: true
    post_id?: true
    user_id?: true
  }

  export type ChatCountAggregateInputType = {
    id?: true
    message?: true
    post_id?: true
    user_id?: true
    _all?: true
  }

  export type ChatAggregateArgs = {
    /**
     * Filter which Chat to aggregate.
     */
    where?: ChatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chats to fetch.
     */
    orderBy?: Enumerable<ChatOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Chats
    **/
    _count?: true | ChatCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChatAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChatSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChatMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChatMaxAggregateInputType
  }

  export type GetChatAggregateType<T extends ChatAggregateArgs> = {
        [P in keyof T & keyof AggregateChat]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChat[P]>
      : GetScalarType<T[P], AggregateChat[P]>
  }




  export type ChatGroupByArgs = {
    where?: ChatWhereInput
    orderBy?: Enumerable<ChatOrderByWithAggregationInput>
    by: ChatScalarFieldEnum[]
    having?: ChatScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChatCountAggregateInputType | true
    _avg?: ChatAvgAggregateInputType
    _sum?: ChatSumAggregateInputType
    _min?: ChatMinAggregateInputType
    _max?: ChatMaxAggregateInputType
  }


  export type ChatGroupByOutputType = {
    id: number
    message: string
    post_id: number
    user_id: number
    _count: ChatCountAggregateOutputType | null
    _avg: ChatAvgAggregateOutputType | null
    _sum: ChatSumAggregateOutputType | null
    _min: ChatMinAggregateOutputType | null
    _max: ChatMaxAggregateOutputType | null
  }

  type GetChatGroupByPayload<T extends ChatGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ChatGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChatGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChatGroupByOutputType[P]>
            : GetScalarType<T[P], ChatGroupByOutputType[P]>
        }
      >
    >


  export type ChatSelect = {
    id?: boolean
    message?: boolean
    post_id?: boolean
    user_id?: boolean
    post?: boolean | PostArgs
    user?: boolean | UserArgs
  }


  export type ChatInclude = {
    post?: boolean | PostArgs
    user?: boolean | UserArgs
  }

  export type ChatGetPayload<S extends boolean | null | undefined | ChatArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Chat :
    S extends undefined ? never :
    S extends { include: any } & (ChatArgs | ChatFindManyArgs)
    ? Chat  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'post' ? PostGetPayload<S['include'][P]> :
        P extends 'user' ? UserGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ChatArgs | ChatFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'post' ? PostGetPayload<S['select'][P]> :
        P extends 'user' ? UserGetPayload<S['select'][P]> :  P extends keyof Chat ? Chat[P] : never
  } 
      : Chat


  type ChatCountArgs = 
    Omit<ChatFindManyArgs, 'select' | 'include'> & {
      select?: ChatCountAggregateInputType | true
    }

  export interface ChatDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Chat that matches the filter.
     * @param {ChatFindUniqueArgs} args - Arguments to find a Chat
     * @example
     * // Get one Chat
     * const chat = await prisma.chat.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ChatFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ChatFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Chat'> extends True ? Prisma__ChatClient<ChatGetPayload<T>> : Prisma__ChatClient<ChatGetPayload<T> | null, null>

    /**
     * Find one Chat that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ChatFindUniqueOrThrowArgs} args - Arguments to find a Chat
     * @example
     * // Get one Chat
     * const chat = await prisma.chat.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ChatFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ChatFindUniqueOrThrowArgs>
    ): Prisma__ChatClient<ChatGetPayload<T>>

    /**
     * Find the first Chat that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatFindFirstArgs} args - Arguments to find a Chat
     * @example
     * // Get one Chat
     * const chat = await prisma.chat.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ChatFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ChatFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Chat'> extends True ? Prisma__ChatClient<ChatGetPayload<T>> : Prisma__ChatClient<ChatGetPayload<T> | null, null>

    /**
     * Find the first Chat that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatFindFirstOrThrowArgs} args - Arguments to find a Chat
     * @example
     * // Get one Chat
     * const chat = await prisma.chat.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ChatFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ChatFindFirstOrThrowArgs>
    ): Prisma__ChatClient<ChatGetPayload<T>>

    /**
     * Find zero or more Chats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Chats
     * const chats = await prisma.chat.findMany()
     * 
     * // Get first 10 Chats
     * const chats = await prisma.chat.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const chatWithIdOnly = await prisma.chat.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ChatFindManyArgs>(
      args?: SelectSubset<T, ChatFindManyArgs>
    ): Prisma.PrismaPromise<Array<ChatGetPayload<T>>>

    /**
     * Create a Chat.
     * @param {ChatCreateArgs} args - Arguments to create a Chat.
     * @example
     * // Create one Chat
     * const Chat = await prisma.chat.create({
     *   data: {
     *     // ... data to create a Chat
     *   }
     * })
     * 
    **/
    create<T extends ChatCreateArgs>(
      args: SelectSubset<T, ChatCreateArgs>
    ): Prisma__ChatClient<ChatGetPayload<T>>

    /**
     * Create many Chats.
     *     @param {ChatCreateManyArgs} args - Arguments to create many Chats.
     *     @example
     *     // Create many Chats
     *     const chat = await prisma.chat.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ChatCreateManyArgs>(
      args?: SelectSubset<T, ChatCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Chat.
     * @param {ChatDeleteArgs} args - Arguments to delete one Chat.
     * @example
     * // Delete one Chat
     * const Chat = await prisma.chat.delete({
     *   where: {
     *     // ... filter to delete one Chat
     *   }
     * })
     * 
    **/
    delete<T extends ChatDeleteArgs>(
      args: SelectSubset<T, ChatDeleteArgs>
    ): Prisma__ChatClient<ChatGetPayload<T>>

    /**
     * Update one Chat.
     * @param {ChatUpdateArgs} args - Arguments to update one Chat.
     * @example
     * // Update one Chat
     * const chat = await prisma.chat.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ChatUpdateArgs>(
      args: SelectSubset<T, ChatUpdateArgs>
    ): Prisma__ChatClient<ChatGetPayload<T>>

    /**
     * Delete zero or more Chats.
     * @param {ChatDeleteManyArgs} args - Arguments to filter Chats to delete.
     * @example
     * // Delete a few Chats
     * const { count } = await prisma.chat.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ChatDeleteManyArgs>(
      args?: SelectSubset<T, ChatDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Chats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Chats
     * const chat = await prisma.chat.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ChatUpdateManyArgs>(
      args: SelectSubset<T, ChatUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Chat.
     * @param {ChatUpsertArgs} args - Arguments to update or create a Chat.
     * @example
     * // Update or create a Chat
     * const chat = await prisma.chat.upsert({
     *   create: {
     *     // ... data to create a Chat
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Chat we want to update
     *   }
     * })
    **/
    upsert<T extends ChatUpsertArgs>(
      args: SelectSubset<T, ChatUpsertArgs>
    ): Prisma__ChatClient<ChatGetPayload<T>>

    /**
     * Count the number of Chats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatCountArgs} args - Arguments to filter Chats to count.
     * @example
     * // Count the number of Chats
     * const count = await prisma.chat.count({
     *   where: {
     *     // ... the filter for the Chats we want to count
     *   }
     * })
    **/
    count<T extends ChatCountArgs>(
      args?: Subset<T, ChatCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChatCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Chat.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChatAggregateArgs>(args: Subset<T, ChatAggregateArgs>): Prisma.PrismaPromise<GetChatAggregateType<T>>

    /**
     * Group by Chat.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChatGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChatGroupByArgs['orderBy'] }
        : { orderBy?: ChatGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChatGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChatGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Chat.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ChatClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    post<T extends PostArgs= {}>(args?: Subset<T, PostArgs>): Prisma__PostClient<PostGetPayload<T> | Null>;

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Chat base type for findUnique actions
   */
  export type ChatFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatInclude | null
    /**
     * Filter, which Chat to fetch.
     */
    where: ChatWhereUniqueInput
  }

  /**
   * Chat findUnique
   */
  export interface ChatFindUniqueArgs extends ChatFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Chat findUniqueOrThrow
   */
  export type ChatFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatInclude | null
    /**
     * Filter, which Chat to fetch.
     */
    where: ChatWhereUniqueInput
  }


  /**
   * Chat base type for findFirst actions
   */
  export type ChatFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatInclude | null
    /**
     * Filter, which Chat to fetch.
     */
    where?: ChatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chats to fetch.
     */
    orderBy?: Enumerable<ChatOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Chats.
     */
    cursor?: ChatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Chats.
     */
    distinct?: Enumerable<ChatScalarFieldEnum>
  }

  /**
   * Chat findFirst
   */
  export interface ChatFindFirstArgs extends ChatFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Chat findFirstOrThrow
   */
  export type ChatFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatInclude | null
    /**
     * Filter, which Chat to fetch.
     */
    where?: ChatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chats to fetch.
     */
    orderBy?: Enumerable<ChatOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Chats.
     */
    cursor?: ChatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Chats.
     */
    distinct?: Enumerable<ChatScalarFieldEnum>
  }


  /**
   * Chat findMany
   */
  export type ChatFindManyArgs = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatInclude | null
    /**
     * Filter, which Chats to fetch.
     */
    where?: ChatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chats to fetch.
     */
    orderBy?: Enumerable<ChatOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Chats.
     */
    cursor?: ChatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chats.
     */
    skip?: number
    distinct?: Enumerable<ChatScalarFieldEnum>
  }


  /**
   * Chat create
   */
  export type ChatCreateArgs = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatInclude | null
    /**
     * The data needed to create a Chat.
     */
    data: XOR<ChatCreateInput, ChatUncheckedCreateInput>
  }


  /**
   * Chat createMany
   */
  export type ChatCreateManyArgs = {
    /**
     * The data used to create many Chats.
     */
    data: Enumerable<ChatCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Chat update
   */
  export type ChatUpdateArgs = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatInclude | null
    /**
     * The data needed to update a Chat.
     */
    data: XOR<ChatUpdateInput, ChatUncheckedUpdateInput>
    /**
     * Choose, which Chat to update.
     */
    where: ChatWhereUniqueInput
  }


  /**
   * Chat updateMany
   */
  export type ChatUpdateManyArgs = {
    /**
     * The data used to update Chats.
     */
    data: XOR<ChatUpdateManyMutationInput, ChatUncheckedUpdateManyInput>
    /**
     * Filter which Chats to update
     */
    where?: ChatWhereInput
  }


  /**
   * Chat upsert
   */
  export type ChatUpsertArgs = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatInclude | null
    /**
     * The filter to search for the Chat to update in case it exists.
     */
    where: ChatWhereUniqueInput
    /**
     * In case the Chat found by the `where` argument doesn't exist, create a new Chat with this data.
     */
    create: XOR<ChatCreateInput, ChatUncheckedCreateInput>
    /**
     * In case the Chat was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChatUpdateInput, ChatUncheckedUpdateInput>
  }


  /**
   * Chat delete
   */
  export type ChatDeleteArgs = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatInclude | null
    /**
     * Filter which Chat to delete.
     */
    where: ChatWhereUniqueInput
  }


  /**
   * Chat deleteMany
   */
  export type ChatDeleteManyArgs = {
    /**
     * Filter which Chats to delete
     */
    where?: ChatWhereInput
  }


  /**
   * Chat without action
   */
  export type ChatArgs = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatInclude | null
  }



  /**
   * Model Search
   */


  export type AggregateSearch = {
    _count: SearchCountAggregateOutputType | null
    _avg: SearchAvgAggregateOutputType | null
    _sum: SearchSumAggregateOutputType | null
    _min: SearchMinAggregateOutputType | null
    _max: SearchMaxAggregateOutputType | null
  }

  export type SearchAvgAggregateOutputType = {
    id: number | null
    post_id: number | null
  }

  export type SearchSumAggregateOutputType = {
    id: number | null
    post_id: number | null
  }

  export type SearchMinAggregateOutputType = {
    id: number | null
    search_title: string | null
    post_id: number | null
  }

  export type SearchMaxAggregateOutputType = {
    id: number | null
    search_title: string | null
    post_id: number | null
  }

  export type SearchCountAggregateOutputType = {
    id: number
    search_title: number
    post_id: number
    _all: number
  }


  export type SearchAvgAggregateInputType = {
    id?: true
    post_id?: true
  }

  export type SearchSumAggregateInputType = {
    id?: true
    post_id?: true
  }

  export type SearchMinAggregateInputType = {
    id?: true
    search_title?: true
    post_id?: true
  }

  export type SearchMaxAggregateInputType = {
    id?: true
    search_title?: true
    post_id?: true
  }

  export type SearchCountAggregateInputType = {
    id?: true
    search_title?: true
    post_id?: true
    _all?: true
  }

  export type SearchAggregateArgs = {
    /**
     * Filter which Search to aggregate.
     */
    where?: SearchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Searches to fetch.
     */
    orderBy?: Enumerable<SearchOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SearchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Searches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Searches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Searches
    **/
    _count?: true | SearchCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SearchAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SearchSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SearchMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SearchMaxAggregateInputType
  }

  export type GetSearchAggregateType<T extends SearchAggregateArgs> = {
        [P in keyof T & keyof AggregateSearch]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSearch[P]>
      : GetScalarType<T[P], AggregateSearch[P]>
  }




  export type SearchGroupByArgs = {
    where?: SearchWhereInput
    orderBy?: Enumerable<SearchOrderByWithAggregationInput>
    by: SearchScalarFieldEnum[]
    having?: SearchScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SearchCountAggregateInputType | true
    _avg?: SearchAvgAggregateInputType
    _sum?: SearchSumAggregateInputType
    _min?: SearchMinAggregateInputType
    _max?: SearchMaxAggregateInputType
  }


  export type SearchGroupByOutputType = {
    id: number
    search_title: string
    post_id: number
    _count: SearchCountAggregateOutputType | null
    _avg: SearchAvgAggregateOutputType | null
    _sum: SearchSumAggregateOutputType | null
    _min: SearchMinAggregateOutputType | null
    _max: SearchMaxAggregateOutputType | null
  }

  type GetSearchGroupByPayload<T extends SearchGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<SearchGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SearchGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SearchGroupByOutputType[P]>
            : GetScalarType<T[P], SearchGroupByOutputType[P]>
        }
      >
    >


  export type SearchSelect = {
    id?: boolean
    search_title?: boolean
    post_id?: boolean
    post?: boolean | PostArgs
  }


  export type SearchInclude = {
    post?: boolean | PostArgs
  }

  export type SearchGetPayload<S extends boolean | null | undefined | SearchArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Search :
    S extends undefined ? never :
    S extends { include: any } & (SearchArgs | SearchFindManyArgs)
    ? Search  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'post' ? PostGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (SearchArgs | SearchFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'post' ? PostGetPayload<S['select'][P]> :  P extends keyof Search ? Search[P] : never
  } 
      : Search


  type SearchCountArgs = 
    Omit<SearchFindManyArgs, 'select' | 'include'> & {
      select?: SearchCountAggregateInputType | true
    }

  export interface SearchDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Search that matches the filter.
     * @param {SearchFindUniqueArgs} args - Arguments to find a Search
     * @example
     * // Get one Search
     * const search = await prisma.search.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SearchFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SearchFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Search'> extends True ? Prisma__SearchClient<SearchGetPayload<T>> : Prisma__SearchClient<SearchGetPayload<T> | null, null>

    /**
     * Find one Search that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SearchFindUniqueOrThrowArgs} args - Arguments to find a Search
     * @example
     * // Get one Search
     * const search = await prisma.search.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SearchFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, SearchFindUniqueOrThrowArgs>
    ): Prisma__SearchClient<SearchGetPayload<T>>

    /**
     * Find the first Search that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SearchFindFirstArgs} args - Arguments to find a Search
     * @example
     * // Get one Search
     * const search = await prisma.search.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SearchFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SearchFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Search'> extends True ? Prisma__SearchClient<SearchGetPayload<T>> : Prisma__SearchClient<SearchGetPayload<T> | null, null>

    /**
     * Find the first Search that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SearchFindFirstOrThrowArgs} args - Arguments to find a Search
     * @example
     * // Get one Search
     * const search = await prisma.search.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SearchFindFirstOrThrowArgs>(
      args?: SelectSubset<T, SearchFindFirstOrThrowArgs>
    ): Prisma__SearchClient<SearchGetPayload<T>>

    /**
     * Find zero or more Searches that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SearchFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Searches
     * const searches = await prisma.search.findMany()
     * 
     * // Get first 10 Searches
     * const searches = await prisma.search.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const searchWithIdOnly = await prisma.search.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SearchFindManyArgs>(
      args?: SelectSubset<T, SearchFindManyArgs>
    ): Prisma.PrismaPromise<Array<SearchGetPayload<T>>>

    /**
     * Create a Search.
     * @param {SearchCreateArgs} args - Arguments to create a Search.
     * @example
     * // Create one Search
     * const Search = await prisma.search.create({
     *   data: {
     *     // ... data to create a Search
     *   }
     * })
     * 
    **/
    create<T extends SearchCreateArgs>(
      args: SelectSubset<T, SearchCreateArgs>
    ): Prisma__SearchClient<SearchGetPayload<T>>

    /**
     * Create many Searches.
     *     @param {SearchCreateManyArgs} args - Arguments to create many Searches.
     *     @example
     *     // Create many Searches
     *     const search = await prisma.search.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SearchCreateManyArgs>(
      args?: SelectSubset<T, SearchCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Search.
     * @param {SearchDeleteArgs} args - Arguments to delete one Search.
     * @example
     * // Delete one Search
     * const Search = await prisma.search.delete({
     *   where: {
     *     // ... filter to delete one Search
     *   }
     * })
     * 
    **/
    delete<T extends SearchDeleteArgs>(
      args: SelectSubset<T, SearchDeleteArgs>
    ): Prisma__SearchClient<SearchGetPayload<T>>

    /**
     * Update one Search.
     * @param {SearchUpdateArgs} args - Arguments to update one Search.
     * @example
     * // Update one Search
     * const search = await prisma.search.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SearchUpdateArgs>(
      args: SelectSubset<T, SearchUpdateArgs>
    ): Prisma__SearchClient<SearchGetPayload<T>>

    /**
     * Delete zero or more Searches.
     * @param {SearchDeleteManyArgs} args - Arguments to filter Searches to delete.
     * @example
     * // Delete a few Searches
     * const { count } = await prisma.search.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SearchDeleteManyArgs>(
      args?: SelectSubset<T, SearchDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Searches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SearchUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Searches
     * const search = await prisma.search.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SearchUpdateManyArgs>(
      args: SelectSubset<T, SearchUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Search.
     * @param {SearchUpsertArgs} args - Arguments to update or create a Search.
     * @example
     * // Update or create a Search
     * const search = await prisma.search.upsert({
     *   create: {
     *     // ... data to create a Search
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Search we want to update
     *   }
     * })
    **/
    upsert<T extends SearchUpsertArgs>(
      args: SelectSubset<T, SearchUpsertArgs>
    ): Prisma__SearchClient<SearchGetPayload<T>>

    /**
     * Count the number of Searches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SearchCountArgs} args - Arguments to filter Searches to count.
     * @example
     * // Count the number of Searches
     * const count = await prisma.search.count({
     *   where: {
     *     // ... the filter for the Searches we want to count
     *   }
     * })
    **/
    count<T extends SearchCountArgs>(
      args?: Subset<T, SearchCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SearchCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Search.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SearchAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SearchAggregateArgs>(args: Subset<T, SearchAggregateArgs>): Prisma.PrismaPromise<GetSearchAggregateType<T>>

    /**
     * Group by Search.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SearchGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SearchGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SearchGroupByArgs['orderBy'] }
        : { orderBy?: SearchGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SearchGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSearchGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Search.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SearchClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    post<T extends PostArgs= {}>(args?: Subset<T, PostArgs>): Prisma__PostClient<PostGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Search base type for findUnique actions
   */
  export type SearchFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Search
     */
    select?: SearchSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SearchInclude | null
    /**
     * Filter, which Search to fetch.
     */
    where: SearchWhereUniqueInput
  }

  /**
   * Search findUnique
   */
  export interface SearchFindUniqueArgs extends SearchFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Search findUniqueOrThrow
   */
  export type SearchFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Search
     */
    select?: SearchSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SearchInclude | null
    /**
     * Filter, which Search to fetch.
     */
    where: SearchWhereUniqueInput
  }


  /**
   * Search base type for findFirst actions
   */
  export type SearchFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Search
     */
    select?: SearchSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SearchInclude | null
    /**
     * Filter, which Search to fetch.
     */
    where?: SearchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Searches to fetch.
     */
    orderBy?: Enumerable<SearchOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Searches.
     */
    cursor?: SearchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Searches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Searches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Searches.
     */
    distinct?: Enumerable<SearchScalarFieldEnum>
  }

  /**
   * Search findFirst
   */
  export interface SearchFindFirstArgs extends SearchFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Search findFirstOrThrow
   */
  export type SearchFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Search
     */
    select?: SearchSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SearchInclude | null
    /**
     * Filter, which Search to fetch.
     */
    where?: SearchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Searches to fetch.
     */
    orderBy?: Enumerable<SearchOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Searches.
     */
    cursor?: SearchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Searches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Searches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Searches.
     */
    distinct?: Enumerable<SearchScalarFieldEnum>
  }


  /**
   * Search findMany
   */
  export type SearchFindManyArgs = {
    /**
     * Select specific fields to fetch from the Search
     */
    select?: SearchSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SearchInclude | null
    /**
     * Filter, which Searches to fetch.
     */
    where?: SearchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Searches to fetch.
     */
    orderBy?: Enumerable<SearchOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Searches.
     */
    cursor?: SearchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Searches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Searches.
     */
    skip?: number
    distinct?: Enumerable<SearchScalarFieldEnum>
  }


  /**
   * Search create
   */
  export type SearchCreateArgs = {
    /**
     * Select specific fields to fetch from the Search
     */
    select?: SearchSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SearchInclude | null
    /**
     * The data needed to create a Search.
     */
    data: XOR<SearchCreateInput, SearchUncheckedCreateInput>
  }


  /**
   * Search createMany
   */
  export type SearchCreateManyArgs = {
    /**
     * The data used to create many Searches.
     */
    data: Enumerable<SearchCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Search update
   */
  export type SearchUpdateArgs = {
    /**
     * Select specific fields to fetch from the Search
     */
    select?: SearchSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SearchInclude | null
    /**
     * The data needed to update a Search.
     */
    data: XOR<SearchUpdateInput, SearchUncheckedUpdateInput>
    /**
     * Choose, which Search to update.
     */
    where: SearchWhereUniqueInput
  }


  /**
   * Search updateMany
   */
  export type SearchUpdateManyArgs = {
    /**
     * The data used to update Searches.
     */
    data: XOR<SearchUpdateManyMutationInput, SearchUncheckedUpdateManyInput>
    /**
     * Filter which Searches to update
     */
    where?: SearchWhereInput
  }


  /**
   * Search upsert
   */
  export type SearchUpsertArgs = {
    /**
     * Select specific fields to fetch from the Search
     */
    select?: SearchSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SearchInclude | null
    /**
     * The filter to search for the Search to update in case it exists.
     */
    where: SearchWhereUniqueInput
    /**
     * In case the Search found by the `where` argument doesn't exist, create a new Search with this data.
     */
    create: XOR<SearchCreateInput, SearchUncheckedCreateInput>
    /**
     * In case the Search was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SearchUpdateInput, SearchUncheckedUpdateInput>
  }


  /**
   * Search delete
   */
  export type SearchDeleteArgs = {
    /**
     * Select specific fields to fetch from the Search
     */
    select?: SearchSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SearchInclude | null
    /**
     * Filter which Search to delete.
     */
    where: SearchWhereUniqueInput
  }


  /**
   * Search deleteMany
   */
  export type SearchDeleteManyArgs = {
    /**
     * Filter which Searches to delete
     */
    where?: SearchWhereInput
  }


  /**
   * Search without action
   */
  export type SearchArgs = {
    /**
     * Select specific fields to fetch from the Search
     */
    select?: SearchSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SearchInclude | null
  }



  /**
   * Model Profile
   */


  export type AggregateProfile = {
    _count: ProfileCountAggregateOutputType | null
    _avg: ProfileAvgAggregateOutputType | null
    _sum: ProfileSumAggregateOutputType | null
    _min: ProfileMinAggregateOutputType | null
    _max: ProfileMaxAggregateOutputType | null
  }

  export type ProfileAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
    post_id: number | null
    postcomment_id: number | null
  }

  export type ProfileSumAggregateOutputType = {
    id: number | null
    user_id: number | null
    post_id: number | null
    postcomment_id: number | null
  }

  export type ProfileMinAggregateOutputType = {
    id: number | null
    user_id: number | null
    post_id: number | null
    postcomment_id: number | null
  }

  export type ProfileMaxAggregateOutputType = {
    id: number | null
    user_id: number | null
    post_id: number | null
    postcomment_id: number | null
  }

  export type ProfileCountAggregateOutputType = {
    id: number
    user_id: number
    post_id: number
    postcomment_id: number
    _all: number
  }


  export type ProfileAvgAggregateInputType = {
    id?: true
    user_id?: true
    post_id?: true
    postcomment_id?: true
  }

  export type ProfileSumAggregateInputType = {
    id?: true
    user_id?: true
    post_id?: true
    postcomment_id?: true
  }

  export type ProfileMinAggregateInputType = {
    id?: true
    user_id?: true
    post_id?: true
    postcomment_id?: true
  }

  export type ProfileMaxAggregateInputType = {
    id?: true
    user_id?: true
    post_id?: true
    postcomment_id?: true
  }

  export type ProfileCountAggregateInputType = {
    id?: true
    user_id?: true
    post_id?: true
    postcomment_id?: true
    _all?: true
  }

  export type ProfileAggregateArgs = {
    /**
     * Filter which Profile to aggregate.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: Enumerable<ProfileOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Profiles
    **/
    _count?: true | ProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProfileAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProfileSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProfileMaxAggregateInputType
  }

  export type GetProfileAggregateType<T extends ProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfile[P]>
      : GetScalarType<T[P], AggregateProfile[P]>
  }




  export type ProfileGroupByArgs = {
    where?: ProfileWhereInput
    orderBy?: Enumerable<ProfileOrderByWithAggregationInput>
    by: ProfileScalarFieldEnum[]
    having?: ProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProfileCountAggregateInputType | true
    _avg?: ProfileAvgAggregateInputType
    _sum?: ProfileSumAggregateInputType
    _min?: ProfileMinAggregateInputType
    _max?: ProfileMaxAggregateInputType
  }


  export type ProfileGroupByOutputType = {
    id: number
    user_id: number
    post_id: number
    postcomment_id: number | null
    _count: ProfileCountAggregateOutputType | null
    _avg: ProfileAvgAggregateOutputType | null
    _sum: ProfileSumAggregateOutputType | null
    _min: ProfileMinAggregateOutputType | null
    _max: ProfileMaxAggregateOutputType | null
  }

  type GetProfileGroupByPayload<T extends ProfileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProfileGroupByOutputType[P]>
            : GetScalarType<T[P], ProfileGroupByOutputType[P]>
        }
      >
    >


  export type ProfileSelect = {
    id?: boolean
    user_id?: boolean
    post_id?: boolean
    postcomment_id?: boolean
    user?: boolean | UserArgs
    post?: boolean | PostArgs
    postcomment?: boolean | Post_CommentArgs
  }


  export type ProfileInclude = {
    user?: boolean | UserArgs
    post?: boolean | PostArgs
    postcomment?: boolean | Post_CommentArgs
  }

  export type ProfileGetPayload<S extends boolean | null | undefined | ProfileArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Profile :
    S extends undefined ? never :
    S extends { include: any } & (ProfileArgs | ProfileFindManyArgs)
    ? Profile  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :
        P extends 'post' ? PostGetPayload<S['include'][P]> :
        P extends 'postcomment' ? Post_CommentGetPayload<S['include'][P]> | null :  never
  } 
    : S extends { select: any } & (ProfileArgs | ProfileFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :
        P extends 'post' ? PostGetPayload<S['select'][P]> :
        P extends 'postcomment' ? Post_CommentGetPayload<S['select'][P]> | null :  P extends keyof Profile ? Profile[P] : never
  } 
      : Profile


  type ProfileCountArgs = 
    Omit<ProfileFindManyArgs, 'select' | 'include'> & {
      select?: ProfileCountAggregateInputType | true
    }

  export interface ProfileDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Profile that matches the filter.
     * @param {ProfileFindUniqueArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProfileFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ProfileFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Profile'> extends True ? Prisma__ProfileClient<ProfileGetPayload<T>> : Prisma__ProfileClient<ProfileGetPayload<T> | null, null>

    /**
     * Find one Profile that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ProfileFindUniqueOrThrowArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProfileFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ProfileFindUniqueOrThrowArgs>
    ): Prisma__ProfileClient<ProfileGetPayload<T>>

    /**
     * Find the first Profile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindFirstArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProfileFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ProfileFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Profile'> extends True ? Prisma__ProfileClient<ProfileGetPayload<T>> : Prisma__ProfileClient<ProfileGetPayload<T> | null, null>

    /**
     * Find the first Profile that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindFirstOrThrowArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProfileFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ProfileFindFirstOrThrowArgs>
    ): Prisma__ProfileClient<ProfileGetPayload<T>>

    /**
     * Find zero or more Profiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Profiles
     * const profiles = await prisma.profile.findMany()
     * 
     * // Get first 10 Profiles
     * const profiles = await prisma.profile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const profileWithIdOnly = await prisma.profile.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProfileFindManyArgs>(
      args?: SelectSubset<T, ProfileFindManyArgs>
    ): Prisma.PrismaPromise<Array<ProfileGetPayload<T>>>

    /**
     * Create a Profile.
     * @param {ProfileCreateArgs} args - Arguments to create a Profile.
     * @example
     * // Create one Profile
     * const Profile = await prisma.profile.create({
     *   data: {
     *     // ... data to create a Profile
     *   }
     * })
     * 
    **/
    create<T extends ProfileCreateArgs>(
      args: SelectSubset<T, ProfileCreateArgs>
    ): Prisma__ProfileClient<ProfileGetPayload<T>>

    /**
     * Create many Profiles.
     *     @param {ProfileCreateManyArgs} args - Arguments to create many Profiles.
     *     @example
     *     // Create many Profiles
     *     const profile = await prisma.profile.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProfileCreateManyArgs>(
      args?: SelectSubset<T, ProfileCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Profile.
     * @param {ProfileDeleteArgs} args - Arguments to delete one Profile.
     * @example
     * // Delete one Profile
     * const Profile = await prisma.profile.delete({
     *   where: {
     *     // ... filter to delete one Profile
     *   }
     * })
     * 
    **/
    delete<T extends ProfileDeleteArgs>(
      args: SelectSubset<T, ProfileDeleteArgs>
    ): Prisma__ProfileClient<ProfileGetPayload<T>>

    /**
     * Update one Profile.
     * @param {ProfileUpdateArgs} args - Arguments to update one Profile.
     * @example
     * // Update one Profile
     * const profile = await prisma.profile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProfileUpdateArgs>(
      args: SelectSubset<T, ProfileUpdateArgs>
    ): Prisma__ProfileClient<ProfileGetPayload<T>>

    /**
     * Delete zero or more Profiles.
     * @param {ProfileDeleteManyArgs} args - Arguments to filter Profiles to delete.
     * @example
     * // Delete a few Profiles
     * const { count } = await prisma.profile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProfileDeleteManyArgs>(
      args?: SelectSubset<T, ProfileDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Profiles
     * const profile = await prisma.profile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProfileUpdateManyArgs>(
      args: SelectSubset<T, ProfileUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Profile.
     * @param {ProfileUpsertArgs} args - Arguments to update or create a Profile.
     * @example
     * // Update or create a Profile
     * const profile = await prisma.profile.upsert({
     *   create: {
     *     // ... data to create a Profile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Profile we want to update
     *   }
     * })
    **/
    upsert<T extends ProfileUpsertArgs>(
      args: SelectSubset<T, ProfileUpsertArgs>
    ): Prisma__ProfileClient<ProfileGetPayload<T>>

    /**
     * Count the number of Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileCountArgs} args - Arguments to filter Profiles to count.
     * @example
     * // Count the number of Profiles
     * const count = await prisma.profile.count({
     *   where: {
     *     // ... the filter for the Profiles we want to count
     *   }
     * })
    **/
    count<T extends ProfileCountArgs>(
      args?: Subset<T, ProfileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Profile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProfileAggregateArgs>(args: Subset<T, ProfileAggregateArgs>): Prisma.PrismaPromise<GetProfileAggregateType<T>>

    /**
     * Group by Profile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProfileGroupByArgs['orderBy'] }
        : { orderBy?: ProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Profile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ProfileClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    post<T extends PostArgs= {}>(args?: Subset<T, PostArgs>): Prisma__PostClient<PostGetPayload<T> | Null>;

    postcomment<T extends Post_CommentArgs= {}>(args?: Subset<T, Post_CommentArgs>): Prisma__Post_CommentClient<Post_CommentGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Profile base type for findUnique actions
   */
  export type ProfileFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude | null
    /**
     * Filter, which Profile to fetch.
     */
    where: ProfileWhereUniqueInput
  }

  /**
   * Profile findUnique
   */
  export interface ProfileFindUniqueArgs extends ProfileFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Profile findUniqueOrThrow
   */
  export type ProfileFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude | null
    /**
     * Filter, which Profile to fetch.
     */
    where: ProfileWhereUniqueInput
  }


  /**
   * Profile base type for findFirst actions
   */
  export type ProfileFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude | null
    /**
     * Filter, which Profile to fetch.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: Enumerable<ProfileOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Profiles.
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Profiles.
     */
    distinct?: Enumerable<ProfileScalarFieldEnum>
  }

  /**
   * Profile findFirst
   */
  export interface ProfileFindFirstArgs extends ProfileFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Profile findFirstOrThrow
   */
  export type ProfileFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude | null
    /**
     * Filter, which Profile to fetch.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: Enumerable<ProfileOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Profiles.
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Profiles.
     */
    distinct?: Enumerable<ProfileScalarFieldEnum>
  }


  /**
   * Profile findMany
   */
  export type ProfileFindManyArgs = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude | null
    /**
     * Filter, which Profiles to fetch.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: Enumerable<ProfileOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Profiles.
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    distinct?: Enumerable<ProfileScalarFieldEnum>
  }


  /**
   * Profile create
   */
  export type ProfileCreateArgs = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude | null
    /**
     * The data needed to create a Profile.
     */
    data: XOR<ProfileCreateInput, ProfileUncheckedCreateInput>
  }


  /**
   * Profile createMany
   */
  export type ProfileCreateManyArgs = {
    /**
     * The data used to create many Profiles.
     */
    data: Enumerable<ProfileCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Profile update
   */
  export type ProfileUpdateArgs = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude | null
    /**
     * The data needed to update a Profile.
     */
    data: XOR<ProfileUpdateInput, ProfileUncheckedUpdateInput>
    /**
     * Choose, which Profile to update.
     */
    where: ProfileWhereUniqueInput
  }


  /**
   * Profile updateMany
   */
  export type ProfileUpdateManyArgs = {
    /**
     * The data used to update Profiles.
     */
    data: XOR<ProfileUpdateManyMutationInput, ProfileUncheckedUpdateManyInput>
    /**
     * Filter which Profiles to update
     */
    where?: ProfileWhereInput
  }


  /**
   * Profile upsert
   */
  export type ProfileUpsertArgs = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude | null
    /**
     * The filter to search for the Profile to update in case it exists.
     */
    where: ProfileWhereUniqueInput
    /**
     * In case the Profile found by the `where` argument doesn't exist, create a new Profile with this data.
     */
    create: XOR<ProfileCreateInput, ProfileUncheckedCreateInput>
    /**
     * In case the Profile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProfileUpdateInput, ProfileUncheckedUpdateInput>
  }


  /**
   * Profile delete
   */
  export type ProfileDeleteArgs = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude | null
    /**
     * Filter which Profile to delete.
     */
    where: ProfileWhereUniqueInput
  }


  /**
   * Profile deleteMany
   */
  export type ProfileDeleteManyArgs = {
    /**
     * Filter which Profiles to delete
     */
    where?: ProfileWhereInput
  }


  /**
   * Profile without action
   */
  export type ProfileArgs = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const ChatScalarFieldEnum: {
    id: 'id',
    message: 'message',
    post_id: 'post_id',
    user_id: 'user_id'
  };

  export type ChatScalarFieldEnum = (typeof ChatScalarFieldEnum)[keyof typeof ChatScalarFieldEnum]


  export const MapScalarFieldEnum: {
    id: 'id',
    lat: 'lat',
    long: 'long',
    title: 'title',
    address: 'address',
    install_date: 'install_date',
    pri_pub_div: 'pri_pub_div',
    in_out_div: 'in_out_div'
  };

  export type MapScalarFieldEnum = (typeof MapScalarFieldEnum)[keyof typeof MapScalarFieldEnum]


  export const PostLikeScalarFieldEnum: {
    user_id: 'user_id',
    post_id: 'post_id'
  };

  export type PostLikeScalarFieldEnum = (typeof PostLikeScalarFieldEnum)[keyof typeof PostLikeScalarFieldEnum]


  export const PostScalarFieldEnum: {
    id: 'id',
    title: 'title',
    info: 'info',
    src_url: 'src_url',
    createdAt: 'createdAt',
    map_id: 'map_id'
  };

  export type PostScalarFieldEnum = (typeof PostScalarFieldEnum)[keyof typeof PostScalarFieldEnum]


  export const Post_CommentScalarFieldEnum: {
    id: 'id',
    content: 'content',
    star: 'star',
    createdAt: 'createdAt',
    post_id: 'post_id',
    user_id: 'user_id'
  };

  export type Post_CommentScalarFieldEnum = (typeof Post_CommentScalarFieldEnum)[keyof typeof Post_CommentScalarFieldEnum]


  export const ProfileScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    post_id: 'post_id',
    postcomment_id: 'postcomment_id'
  };

  export type ProfileScalarFieldEnum = (typeof ProfileScalarFieldEnum)[keyof typeof ProfileScalarFieldEnum]


  export const SearchScalarFieldEnum: {
    id: 'id',
    search_title: 'search_title',
    post_id: 'post_id'
  };

  export type SearchScalarFieldEnum = (typeof SearchScalarFieldEnum)[keyof typeof SearchScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    name: 'name',
    phoneNumber: 'phoneNumber',
    password: 'password',
    profile_img_num: 'profile_img_num',
    createdAt: 'createdAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: IntFilter | number
    email?: StringFilter | string
    name?: StringFilter | string
    phoneNumber?: StringFilter | string
    password?: StringFilter | string
    profile_img_num?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    postlike?: PostLikeListRelationFilter
    postcomment?: Post_CommentListRelationFilter
    chat?: ChatListRelationFilter
    profile?: ProfileListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    phoneNumber?: SortOrder
    password?: SortOrder
    profile_img_num?: SortOrder
    createdAt?: SortOrder
    postlike?: PostLikeOrderByRelationAggregateInput
    postcomment?: Post_CommentOrderByRelationAggregateInput
    chat?: ChatOrderByRelationAggregateInput
    profile?: ProfileOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = {
    id?: number
    email?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    phoneNumber?: SortOrder
    password?: SortOrder
    profile_img_num?: SortOrder
    createdAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    email?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    phoneNumber?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    profile_img_num?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type MapWhereInput = {
    AND?: Enumerable<MapWhereInput>
    OR?: Enumerable<MapWhereInput>
    NOT?: Enumerable<MapWhereInput>
    id?: IntFilter | number
    lat?: FloatFilter | number
    long?: FloatFilter | number
    title?: StringFilter | string
    address?: StringFilter | string
    install_date?: DateTimeFilter | Date | string
    pri_pub_div?: StringFilter | string
    in_out_div?: StringFilter | string
    post?: PostListRelationFilter
  }

  export type MapOrderByWithRelationInput = {
    id?: SortOrder
    lat?: SortOrder
    long?: SortOrder
    title?: SortOrder
    address?: SortOrder
    install_date?: SortOrder
    pri_pub_div?: SortOrder
    in_out_div?: SortOrder
    post?: PostOrderByRelationAggregateInput
  }

  export type MapWhereUniqueInput = {
    id?: number
  }

  export type MapOrderByWithAggregationInput = {
    id?: SortOrder
    lat?: SortOrder
    long?: SortOrder
    title?: SortOrder
    address?: SortOrder
    install_date?: SortOrder
    pri_pub_div?: SortOrder
    in_out_div?: SortOrder
    _count?: MapCountOrderByAggregateInput
    _avg?: MapAvgOrderByAggregateInput
    _max?: MapMaxOrderByAggregateInput
    _min?: MapMinOrderByAggregateInput
    _sum?: MapSumOrderByAggregateInput
  }

  export type MapScalarWhereWithAggregatesInput = {
    AND?: Enumerable<MapScalarWhereWithAggregatesInput>
    OR?: Enumerable<MapScalarWhereWithAggregatesInput>
    NOT?: Enumerable<MapScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    lat?: FloatWithAggregatesFilter | number
    long?: FloatWithAggregatesFilter | number
    title?: StringWithAggregatesFilter | string
    address?: StringWithAggregatesFilter | string
    install_date?: DateTimeWithAggregatesFilter | Date | string
    pri_pub_div?: StringWithAggregatesFilter | string
    in_out_div?: StringWithAggregatesFilter | string
  }

  export type PostWhereInput = {
    AND?: Enumerable<PostWhereInput>
    OR?: Enumerable<PostWhereInput>
    NOT?: Enumerable<PostWhereInput>
    id?: IntFilter | number
    title?: StringFilter | string
    info?: StringFilter | string
    src_url?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    map_id?: IntFilter | number
    map?: XOR<MapRelationFilter, MapWhereInput>
    postlike?: PostLikeListRelationFilter
    postcomment?: Post_CommentListRelationFilter
    chat?: ChatListRelationFilter
    search?: SearchListRelationFilter
    profile?: ProfileListRelationFilter
  }

  export type PostOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    info?: SortOrder
    src_url?: SortOrder
    createdAt?: SortOrder
    map_id?: SortOrder
    map?: MapOrderByWithRelationInput
    postlike?: PostLikeOrderByRelationAggregateInput
    postcomment?: Post_CommentOrderByRelationAggregateInput
    chat?: ChatOrderByRelationAggregateInput
    search?: SearchOrderByRelationAggregateInput
    profile?: ProfileOrderByRelationAggregateInput
  }

  export type PostWhereUniqueInput = {
    id?: number
  }

  export type PostOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    info?: SortOrder
    src_url?: SortOrder
    createdAt?: SortOrder
    map_id?: SortOrder
    _count?: PostCountOrderByAggregateInput
    _avg?: PostAvgOrderByAggregateInput
    _max?: PostMaxOrderByAggregateInput
    _min?: PostMinOrderByAggregateInput
    _sum?: PostSumOrderByAggregateInput
  }

  export type PostScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PostScalarWhereWithAggregatesInput>
    OR?: Enumerable<PostScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PostScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    title?: StringWithAggregatesFilter | string
    info?: StringWithAggregatesFilter | string
    src_url?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    map_id?: IntWithAggregatesFilter | number
  }

  export type PostLikeWhereInput = {
    AND?: Enumerable<PostLikeWhereInput>
    OR?: Enumerable<PostLikeWhereInput>
    NOT?: Enumerable<PostLikeWhereInput>
    user_id?: IntFilter | number
    post_id?: IntFilter | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    post?: XOR<PostRelationFilter, PostWhereInput>
  }

  export type PostLikeOrderByWithRelationInput = {
    user_id?: SortOrder
    post_id?: SortOrder
    user?: UserOrderByWithRelationInput
    post?: PostOrderByWithRelationInput
  }

  export type PostLikeWhereUniqueInput = {
    user_id_post_id?: PostLikeUser_idPost_idCompoundUniqueInput
  }

  export type PostLikeOrderByWithAggregationInput = {
    user_id?: SortOrder
    post_id?: SortOrder
    _count?: PostLikeCountOrderByAggregateInput
    _avg?: PostLikeAvgOrderByAggregateInput
    _max?: PostLikeMaxOrderByAggregateInput
    _min?: PostLikeMinOrderByAggregateInput
    _sum?: PostLikeSumOrderByAggregateInput
  }

  export type PostLikeScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PostLikeScalarWhereWithAggregatesInput>
    OR?: Enumerable<PostLikeScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PostLikeScalarWhereWithAggregatesInput>
    user_id?: IntWithAggregatesFilter | number
    post_id?: IntWithAggregatesFilter | number
  }

  export type Post_CommentWhereInput = {
    AND?: Enumerable<Post_CommentWhereInput>
    OR?: Enumerable<Post_CommentWhereInput>
    NOT?: Enumerable<Post_CommentWhereInput>
    id?: IntFilter | number
    content?: StringFilter | string
    star?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    post_id?: IntFilter | number
    user_id?: IntFilter | number
    post?: XOR<PostRelationFilter, PostWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
    profile?: ProfileListRelationFilter
  }

  export type Post_CommentOrderByWithRelationInput = {
    id?: SortOrder
    content?: SortOrder
    star?: SortOrder
    createdAt?: SortOrder
    post_id?: SortOrder
    user_id?: SortOrder
    post?: PostOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    profile?: ProfileOrderByRelationAggregateInput
  }

  export type Post_CommentWhereUniqueInput = {
    id?: number
  }

  export type Post_CommentOrderByWithAggregationInput = {
    id?: SortOrder
    content?: SortOrder
    star?: SortOrder
    createdAt?: SortOrder
    post_id?: SortOrder
    user_id?: SortOrder
    _count?: Post_CommentCountOrderByAggregateInput
    _avg?: Post_CommentAvgOrderByAggregateInput
    _max?: Post_CommentMaxOrderByAggregateInput
    _min?: Post_CommentMinOrderByAggregateInput
    _sum?: Post_CommentSumOrderByAggregateInput
  }

  export type Post_CommentScalarWhereWithAggregatesInput = {
    AND?: Enumerable<Post_CommentScalarWhereWithAggregatesInput>
    OR?: Enumerable<Post_CommentScalarWhereWithAggregatesInput>
    NOT?: Enumerable<Post_CommentScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    content?: StringWithAggregatesFilter | string
    star?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    post_id?: IntWithAggregatesFilter | number
    user_id?: IntWithAggregatesFilter | number
  }

  export type ChatWhereInput = {
    AND?: Enumerable<ChatWhereInput>
    OR?: Enumerable<ChatWhereInput>
    NOT?: Enumerable<ChatWhereInput>
    id?: IntFilter | number
    message?: StringFilter | string
    post_id?: IntFilter | number
    user_id?: IntFilter | number
    post?: XOR<PostRelationFilter, PostWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type ChatOrderByWithRelationInput = {
    id?: SortOrder
    message?: SortOrder
    post_id?: SortOrder
    user_id?: SortOrder
    post?: PostOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type ChatWhereUniqueInput = {
    id?: number
  }

  export type ChatOrderByWithAggregationInput = {
    id?: SortOrder
    message?: SortOrder
    post_id?: SortOrder
    user_id?: SortOrder
    _count?: ChatCountOrderByAggregateInput
    _avg?: ChatAvgOrderByAggregateInput
    _max?: ChatMaxOrderByAggregateInput
    _min?: ChatMinOrderByAggregateInput
    _sum?: ChatSumOrderByAggregateInput
  }

  export type ChatScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ChatScalarWhereWithAggregatesInput>
    OR?: Enumerable<ChatScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ChatScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    message?: StringWithAggregatesFilter | string
    post_id?: IntWithAggregatesFilter | number
    user_id?: IntWithAggregatesFilter | number
  }

  export type SearchWhereInput = {
    AND?: Enumerable<SearchWhereInput>
    OR?: Enumerable<SearchWhereInput>
    NOT?: Enumerable<SearchWhereInput>
    id?: IntFilter | number
    search_title?: StringFilter | string
    post_id?: IntFilter | number
    post?: XOR<PostRelationFilter, PostWhereInput>
  }

  export type SearchOrderByWithRelationInput = {
    id?: SortOrder
    search_title?: SortOrder
    post_id?: SortOrder
    post?: PostOrderByWithRelationInput
  }

  export type SearchWhereUniqueInput = {
    id?: number
  }

  export type SearchOrderByWithAggregationInput = {
    id?: SortOrder
    search_title?: SortOrder
    post_id?: SortOrder
    _count?: SearchCountOrderByAggregateInput
    _avg?: SearchAvgOrderByAggregateInput
    _max?: SearchMaxOrderByAggregateInput
    _min?: SearchMinOrderByAggregateInput
    _sum?: SearchSumOrderByAggregateInput
  }

  export type SearchScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SearchScalarWhereWithAggregatesInput>
    OR?: Enumerable<SearchScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SearchScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    search_title?: StringWithAggregatesFilter | string
    post_id?: IntWithAggregatesFilter | number
  }

  export type ProfileWhereInput = {
    AND?: Enumerable<ProfileWhereInput>
    OR?: Enumerable<ProfileWhereInput>
    NOT?: Enumerable<ProfileWhereInput>
    id?: IntFilter | number
    user_id?: IntFilter | number
    post_id?: IntFilter | number
    postcomment_id?: IntNullableFilter | number | null
    user?: XOR<UserRelationFilter, UserWhereInput>
    post?: XOR<PostRelationFilter, PostWhereInput>
    postcomment?: XOR<Post_CommentRelationFilter, Post_CommentWhereInput> | null
  }

  export type ProfileOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    post_id?: SortOrder
    postcomment_id?: SortOrder
    user?: UserOrderByWithRelationInput
    post?: PostOrderByWithRelationInput
    postcomment?: Post_CommentOrderByWithRelationInput
  }

  export type ProfileWhereUniqueInput = {
    id?: number
  }

  export type ProfileOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    post_id?: SortOrder
    postcomment_id?: SortOrder
    _count?: ProfileCountOrderByAggregateInput
    _avg?: ProfileAvgOrderByAggregateInput
    _max?: ProfileMaxOrderByAggregateInput
    _min?: ProfileMinOrderByAggregateInput
    _sum?: ProfileSumOrderByAggregateInput
  }

  export type ProfileScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ProfileScalarWhereWithAggregatesInput>
    OR?: Enumerable<ProfileScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ProfileScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    user_id?: IntWithAggregatesFilter | number
    post_id?: IntWithAggregatesFilter | number
    postcomment_id?: IntNullableWithAggregatesFilter | number | null
  }

  export type UserCreateInput = {
    email: string
    name: string
    phoneNumber: string
    password: string
    profile_img_num: number
    createdAt?: Date | string
    postlike?: PostLikeCreateNestedManyWithoutUserInput
    postcomment?: Post_CommentCreateNestedManyWithoutUserInput
    chat?: ChatCreateNestedManyWithoutUserInput
    profile?: ProfileCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    email: string
    name: string
    phoneNumber: string
    password: string
    profile_img_num: number
    createdAt?: Date | string
    postlike?: PostLikeUncheckedCreateNestedManyWithoutUserInput
    postcomment?: Post_CommentUncheckedCreateNestedManyWithoutUserInput
    chat?: ChatUncheckedCreateNestedManyWithoutUserInput
    profile?: ProfileUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile_img_num?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    postlike?: PostLikeUpdateManyWithoutUserNestedInput
    postcomment?: Post_CommentUpdateManyWithoutUserNestedInput
    chat?: ChatUpdateManyWithoutUserNestedInput
    profile?: ProfileUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile_img_num?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    postlike?: PostLikeUncheckedUpdateManyWithoutUserNestedInput
    postcomment?: Post_CommentUncheckedUpdateManyWithoutUserNestedInput
    chat?: ChatUncheckedUpdateManyWithoutUserNestedInput
    profile?: ProfileUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    email: string
    name: string
    phoneNumber: string
    password: string
    profile_img_num: number
    createdAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile_img_num?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile_img_num?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MapCreateInput = {
    lat: number
    long: number
    title: string
    address: string
    install_date?: Date | string
    pri_pub_div: string
    in_out_div: string
    post?: PostCreateNestedManyWithoutMapInput
  }

  export type MapUncheckedCreateInput = {
    id?: number
    lat: number
    long: number
    title: string
    address: string
    install_date?: Date | string
    pri_pub_div: string
    in_out_div: string
    post?: PostUncheckedCreateNestedManyWithoutMapInput
  }

  export type MapUpdateInput = {
    lat?: FloatFieldUpdateOperationsInput | number
    long?: FloatFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    install_date?: DateTimeFieldUpdateOperationsInput | Date | string
    pri_pub_div?: StringFieldUpdateOperationsInput | string
    in_out_div?: StringFieldUpdateOperationsInput | string
    post?: PostUpdateManyWithoutMapNestedInput
  }

  export type MapUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    lat?: FloatFieldUpdateOperationsInput | number
    long?: FloatFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    install_date?: DateTimeFieldUpdateOperationsInput | Date | string
    pri_pub_div?: StringFieldUpdateOperationsInput | string
    in_out_div?: StringFieldUpdateOperationsInput | string
    post?: PostUncheckedUpdateManyWithoutMapNestedInput
  }

  export type MapCreateManyInput = {
    id?: number
    lat: number
    long: number
    title: string
    address: string
    install_date?: Date | string
    pri_pub_div: string
    in_out_div: string
  }

  export type MapUpdateManyMutationInput = {
    lat?: FloatFieldUpdateOperationsInput | number
    long?: FloatFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    install_date?: DateTimeFieldUpdateOperationsInput | Date | string
    pri_pub_div?: StringFieldUpdateOperationsInput | string
    in_out_div?: StringFieldUpdateOperationsInput | string
  }

  export type MapUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    lat?: FloatFieldUpdateOperationsInput | number
    long?: FloatFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    install_date?: DateTimeFieldUpdateOperationsInput | Date | string
    pri_pub_div?: StringFieldUpdateOperationsInput | string
    in_out_div?: StringFieldUpdateOperationsInput | string
  }

  export type PostCreateInput = {
    title: string
    info: string
    src_url?: string | null
    createdAt?: Date | string
    map: MapCreateNestedOneWithoutPostInput
    postlike?: PostLikeCreateNestedManyWithoutPostInput
    postcomment?: Post_CommentCreateNestedManyWithoutPostInput
    chat?: ChatCreateNestedManyWithoutPostInput
    search?: SearchCreateNestedManyWithoutPostInput
    profile?: ProfileCreateNestedManyWithoutPostInput
  }

  export type PostUncheckedCreateInput = {
    id?: number
    title: string
    info: string
    src_url?: string | null
    createdAt?: Date | string
    map_id: number
    postlike?: PostLikeUncheckedCreateNestedManyWithoutPostInput
    postcomment?: Post_CommentUncheckedCreateNestedManyWithoutPostInput
    chat?: ChatUncheckedCreateNestedManyWithoutPostInput
    search?: SearchUncheckedCreateNestedManyWithoutPostInput
    profile?: ProfileUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    info?: StringFieldUpdateOperationsInput | string
    src_url?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    map?: MapUpdateOneRequiredWithoutPostNestedInput
    postlike?: PostLikeUpdateManyWithoutPostNestedInput
    postcomment?: Post_CommentUpdateManyWithoutPostNestedInput
    chat?: ChatUpdateManyWithoutPostNestedInput
    search?: SearchUpdateManyWithoutPostNestedInput
    profile?: ProfileUpdateManyWithoutPostNestedInput
  }

  export type PostUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    info?: StringFieldUpdateOperationsInput | string
    src_url?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    map_id?: IntFieldUpdateOperationsInput | number
    postlike?: PostLikeUncheckedUpdateManyWithoutPostNestedInput
    postcomment?: Post_CommentUncheckedUpdateManyWithoutPostNestedInput
    chat?: ChatUncheckedUpdateManyWithoutPostNestedInput
    search?: SearchUncheckedUpdateManyWithoutPostNestedInput
    profile?: ProfileUncheckedUpdateManyWithoutPostNestedInput
  }

  export type PostCreateManyInput = {
    id?: number
    title: string
    info: string
    src_url?: string | null
    createdAt?: Date | string
    map_id: number
  }

  export type PostUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    info?: StringFieldUpdateOperationsInput | string
    src_url?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PostUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    info?: StringFieldUpdateOperationsInput | string
    src_url?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    map_id?: IntFieldUpdateOperationsInput | number
  }

  export type PostLikeCreateInput = {
    user: UserCreateNestedOneWithoutPostlikeInput
    post: PostCreateNestedOneWithoutPostlikeInput
  }

  export type PostLikeUncheckedCreateInput = {
    user_id: number
    post_id: number
  }

  export type PostLikeUpdateInput = {
    user?: UserUpdateOneRequiredWithoutPostlikeNestedInput
    post?: PostUpdateOneRequiredWithoutPostlikeNestedInput
  }

  export type PostLikeUncheckedUpdateInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    post_id?: IntFieldUpdateOperationsInput | number
  }

  export type PostLikeCreateManyInput = {
    user_id: number
    post_id: number
  }

  export type PostLikeUpdateManyMutationInput = {

  }

  export type PostLikeUncheckedUpdateManyInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    post_id?: IntFieldUpdateOperationsInput | number
  }

  export type Post_CommentCreateInput = {
    content: string
    star: number
    createdAt?: Date | string
    post: PostCreateNestedOneWithoutPostcommentInput
    user: UserCreateNestedOneWithoutPostcommentInput
    profile?: ProfileCreateNestedManyWithoutPostcommentInput
  }

  export type Post_CommentUncheckedCreateInput = {
    id?: number
    content: string
    star: number
    createdAt?: Date | string
    post_id: number
    user_id: number
    profile?: ProfileUncheckedCreateNestedManyWithoutPostcommentInput
  }

  export type Post_CommentUpdateInput = {
    content?: StringFieldUpdateOperationsInput | string
    star?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    post?: PostUpdateOneRequiredWithoutPostcommentNestedInput
    user?: UserUpdateOneRequiredWithoutPostcommentNestedInput
    profile?: ProfileUpdateManyWithoutPostcommentNestedInput
  }

  export type Post_CommentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    star?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    post_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    profile?: ProfileUncheckedUpdateManyWithoutPostcommentNestedInput
  }

  export type Post_CommentCreateManyInput = {
    id?: number
    content: string
    star: number
    createdAt?: Date | string
    post_id: number
    user_id: number
  }

  export type Post_CommentUpdateManyMutationInput = {
    content?: StringFieldUpdateOperationsInput | string
    star?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Post_CommentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    star?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    post_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
  }

  export type ChatCreateInput = {
    message: string
    post: PostCreateNestedOneWithoutChatInput
    user: UserCreateNestedOneWithoutChatInput
  }

  export type ChatUncheckedCreateInput = {
    id?: number
    message: string
    post_id: number
    user_id: number
  }

  export type ChatUpdateInput = {
    message?: StringFieldUpdateOperationsInput | string
    post?: PostUpdateOneRequiredWithoutChatNestedInput
    user?: UserUpdateOneRequiredWithoutChatNestedInput
  }

  export type ChatUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    post_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
  }

  export type ChatCreateManyInput = {
    id?: number
    message: string
    post_id: number
    user_id: number
  }

  export type ChatUpdateManyMutationInput = {
    message?: StringFieldUpdateOperationsInput | string
  }

  export type ChatUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    post_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
  }

  export type SearchCreateInput = {
    search_title: string
    post: PostCreateNestedOneWithoutSearchInput
  }

  export type SearchUncheckedCreateInput = {
    id?: number
    search_title: string
    post_id: number
  }

  export type SearchUpdateInput = {
    search_title?: StringFieldUpdateOperationsInput | string
    post?: PostUpdateOneRequiredWithoutSearchNestedInput
  }

  export type SearchUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    search_title?: StringFieldUpdateOperationsInput | string
    post_id?: IntFieldUpdateOperationsInput | number
  }

  export type SearchCreateManyInput = {
    id?: number
    search_title: string
    post_id: number
  }

  export type SearchUpdateManyMutationInput = {
    search_title?: StringFieldUpdateOperationsInput | string
  }

  export type SearchUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    search_title?: StringFieldUpdateOperationsInput | string
    post_id?: IntFieldUpdateOperationsInput | number
  }

  export type ProfileCreateInput = {
    user: UserCreateNestedOneWithoutProfileInput
    post: PostCreateNestedOneWithoutProfileInput
    postcomment?: Post_CommentCreateNestedOneWithoutProfileInput
  }

  export type ProfileUncheckedCreateInput = {
    id?: number
    user_id: number
    post_id: number
    postcomment_id?: number | null
  }

  export type ProfileUpdateInput = {
    user?: UserUpdateOneRequiredWithoutProfileNestedInput
    post?: PostUpdateOneRequiredWithoutProfileNestedInput
    postcomment?: Post_CommentUpdateOneWithoutProfileNestedInput
  }

  export type ProfileUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    post_id?: IntFieldUpdateOperationsInput | number
    postcomment_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ProfileCreateManyInput = {
    id?: number
    user_id: number
    post_id: number
    postcomment_id?: number | null
  }

  export type ProfileUpdateManyMutationInput = {

  }

  export type ProfileUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    post_id?: IntFieldUpdateOperationsInput | number
    postcomment_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type PostLikeListRelationFilter = {
    every?: PostLikeWhereInput
    some?: PostLikeWhereInput
    none?: PostLikeWhereInput
  }

  export type Post_CommentListRelationFilter = {
    every?: Post_CommentWhereInput
    some?: Post_CommentWhereInput
    none?: Post_CommentWhereInput
  }

  export type ChatListRelationFilter = {
    every?: ChatWhereInput
    some?: ChatWhereInput
    none?: ChatWhereInput
  }

  export type ProfileListRelationFilter = {
    every?: ProfileWhereInput
    some?: ProfileWhereInput
    none?: ProfileWhereInput
  }

  export type PostLikeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type Post_CommentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChatOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProfileOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    phoneNumber?: SortOrder
    password?: SortOrder
    profile_img_num?: SortOrder
    createdAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
    profile_img_num?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    phoneNumber?: SortOrder
    password?: SortOrder
    profile_img_num?: SortOrder
    createdAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    phoneNumber?: SortOrder
    password?: SortOrder
    profile_img_num?: SortOrder
    createdAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
    profile_img_num?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type FloatFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type PostListRelationFilter = {
    every?: PostWhereInput
    some?: PostWhereInput
    none?: PostWhereInput
  }

  export type PostOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MapCountOrderByAggregateInput = {
    id?: SortOrder
    lat?: SortOrder
    long?: SortOrder
    title?: SortOrder
    address?: SortOrder
    install_date?: SortOrder
    pri_pub_div?: SortOrder
    in_out_div?: SortOrder
  }

  export type MapAvgOrderByAggregateInput = {
    id?: SortOrder
    lat?: SortOrder
    long?: SortOrder
  }

  export type MapMaxOrderByAggregateInput = {
    id?: SortOrder
    lat?: SortOrder
    long?: SortOrder
    title?: SortOrder
    address?: SortOrder
    install_date?: SortOrder
    pri_pub_div?: SortOrder
    in_out_div?: SortOrder
  }

  export type MapMinOrderByAggregateInput = {
    id?: SortOrder
    lat?: SortOrder
    long?: SortOrder
    title?: SortOrder
    address?: SortOrder
    install_date?: SortOrder
    pri_pub_div?: SortOrder
    in_out_div?: SortOrder
  }

  export type MapSumOrderByAggregateInput = {
    id?: SortOrder
    lat?: SortOrder
    long?: SortOrder
  }

  export type FloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type MapRelationFilter = {
    is?: MapWhereInput
    isNot?: MapWhereInput
  }

  export type SearchListRelationFilter = {
    every?: SearchWhereInput
    some?: SearchWhereInput
    none?: SearchWhereInput
  }

  export type SearchOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PostCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    info?: SortOrder
    src_url?: SortOrder
    createdAt?: SortOrder
    map_id?: SortOrder
  }

  export type PostAvgOrderByAggregateInput = {
    id?: SortOrder
    map_id?: SortOrder
  }

  export type PostMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    info?: SortOrder
    src_url?: SortOrder
    createdAt?: SortOrder
    map_id?: SortOrder
  }

  export type PostMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    info?: SortOrder
    src_url?: SortOrder
    createdAt?: SortOrder
    map_id?: SortOrder
  }

  export type PostSumOrderByAggregateInput = {
    id?: SortOrder
    map_id?: SortOrder
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type PostRelationFilter = {
    is?: PostWhereInput
    isNot?: PostWhereInput
  }

  export type PostLikeUser_idPost_idCompoundUniqueInput = {
    user_id: number
    post_id: number
  }

  export type PostLikeCountOrderByAggregateInput = {
    user_id?: SortOrder
    post_id?: SortOrder
  }

  export type PostLikeAvgOrderByAggregateInput = {
    user_id?: SortOrder
    post_id?: SortOrder
  }

  export type PostLikeMaxOrderByAggregateInput = {
    user_id?: SortOrder
    post_id?: SortOrder
  }

  export type PostLikeMinOrderByAggregateInput = {
    user_id?: SortOrder
    post_id?: SortOrder
  }

  export type PostLikeSumOrderByAggregateInput = {
    user_id?: SortOrder
    post_id?: SortOrder
  }

  export type Post_CommentCountOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    star?: SortOrder
    createdAt?: SortOrder
    post_id?: SortOrder
    user_id?: SortOrder
  }

  export type Post_CommentAvgOrderByAggregateInput = {
    id?: SortOrder
    star?: SortOrder
    post_id?: SortOrder
    user_id?: SortOrder
  }

  export type Post_CommentMaxOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    star?: SortOrder
    createdAt?: SortOrder
    post_id?: SortOrder
    user_id?: SortOrder
  }

  export type Post_CommentMinOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    star?: SortOrder
    createdAt?: SortOrder
    post_id?: SortOrder
    user_id?: SortOrder
  }

  export type Post_CommentSumOrderByAggregateInput = {
    id?: SortOrder
    star?: SortOrder
    post_id?: SortOrder
    user_id?: SortOrder
  }

  export type ChatCountOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    post_id?: SortOrder
    user_id?: SortOrder
  }

  export type ChatAvgOrderByAggregateInput = {
    id?: SortOrder
    post_id?: SortOrder
    user_id?: SortOrder
  }

  export type ChatMaxOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    post_id?: SortOrder
    user_id?: SortOrder
  }

  export type ChatMinOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    post_id?: SortOrder
    user_id?: SortOrder
  }

  export type ChatSumOrderByAggregateInput = {
    id?: SortOrder
    post_id?: SortOrder
    user_id?: SortOrder
  }

  export type SearchCountOrderByAggregateInput = {
    id?: SortOrder
    search_title?: SortOrder
    post_id?: SortOrder
  }

  export type SearchAvgOrderByAggregateInput = {
    id?: SortOrder
    post_id?: SortOrder
  }

  export type SearchMaxOrderByAggregateInput = {
    id?: SortOrder
    search_title?: SortOrder
    post_id?: SortOrder
  }

  export type SearchMinOrderByAggregateInput = {
    id?: SortOrder
    search_title?: SortOrder
    post_id?: SortOrder
  }

  export type SearchSumOrderByAggregateInput = {
    id?: SortOrder
    post_id?: SortOrder
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type Post_CommentRelationFilter = {
    is?: Post_CommentWhereInput | null
    isNot?: Post_CommentWhereInput | null
  }

  export type ProfileCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    post_id?: SortOrder
    postcomment_id?: SortOrder
  }

  export type ProfileAvgOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    post_id?: SortOrder
    postcomment_id?: SortOrder
  }

  export type ProfileMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    post_id?: SortOrder
    postcomment_id?: SortOrder
  }

  export type ProfileMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    post_id?: SortOrder
    postcomment_id?: SortOrder
  }

  export type ProfileSumOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    post_id?: SortOrder
    postcomment_id?: SortOrder
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type PostLikeCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<PostLikeCreateWithoutUserInput>, Enumerable<PostLikeUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<PostLikeCreateOrConnectWithoutUserInput>
    createMany?: PostLikeCreateManyUserInputEnvelope
    connect?: Enumerable<PostLikeWhereUniqueInput>
  }

  export type Post_CommentCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<Post_CommentCreateWithoutUserInput>, Enumerable<Post_CommentUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<Post_CommentCreateOrConnectWithoutUserInput>
    createMany?: Post_CommentCreateManyUserInputEnvelope
    connect?: Enumerable<Post_CommentWhereUniqueInput>
  }

  export type ChatCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ChatCreateWithoutUserInput>, Enumerable<ChatUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ChatCreateOrConnectWithoutUserInput>
    createMany?: ChatCreateManyUserInputEnvelope
    connect?: Enumerable<ChatWhereUniqueInput>
  }

  export type ProfileCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ProfileCreateWithoutUserInput>, Enumerable<ProfileUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ProfileCreateOrConnectWithoutUserInput>
    createMany?: ProfileCreateManyUserInputEnvelope
    connect?: Enumerable<ProfileWhereUniqueInput>
  }

  export type PostLikeUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<PostLikeCreateWithoutUserInput>, Enumerable<PostLikeUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<PostLikeCreateOrConnectWithoutUserInput>
    createMany?: PostLikeCreateManyUserInputEnvelope
    connect?: Enumerable<PostLikeWhereUniqueInput>
  }

  export type Post_CommentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<Post_CommentCreateWithoutUserInput>, Enumerable<Post_CommentUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<Post_CommentCreateOrConnectWithoutUserInput>
    createMany?: Post_CommentCreateManyUserInputEnvelope
    connect?: Enumerable<Post_CommentWhereUniqueInput>
  }

  export type ChatUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ChatCreateWithoutUserInput>, Enumerable<ChatUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ChatCreateOrConnectWithoutUserInput>
    createMany?: ChatCreateManyUserInputEnvelope
    connect?: Enumerable<ChatWhereUniqueInput>
  }

  export type ProfileUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ProfileCreateWithoutUserInput>, Enumerable<ProfileUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ProfileCreateOrConnectWithoutUserInput>
    createMany?: ProfileCreateManyUserInputEnvelope
    connect?: Enumerable<ProfileWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type PostLikeUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<PostLikeCreateWithoutUserInput>, Enumerable<PostLikeUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<PostLikeCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<PostLikeUpsertWithWhereUniqueWithoutUserInput>
    createMany?: PostLikeCreateManyUserInputEnvelope
    set?: Enumerable<PostLikeWhereUniqueInput>
    disconnect?: Enumerable<PostLikeWhereUniqueInput>
    delete?: Enumerable<PostLikeWhereUniqueInput>
    connect?: Enumerable<PostLikeWhereUniqueInput>
    update?: Enumerable<PostLikeUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<PostLikeUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<PostLikeScalarWhereInput>
  }

  export type Post_CommentUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<Post_CommentCreateWithoutUserInput>, Enumerable<Post_CommentUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<Post_CommentCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<Post_CommentUpsertWithWhereUniqueWithoutUserInput>
    createMany?: Post_CommentCreateManyUserInputEnvelope
    set?: Enumerable<Post_CommentWhereUniqueInput>
    disconnect?: Enumerable<Post_CommentWhereUniqueInput>
    delete?: Enumerable<Post_CommentWhereUniqueInput>
    connect?: Enumerable<Post_CommentWhereUniqueInput>
    update?: Enumerable<Post_CommentUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<Post_CommentUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<Post_CommentScalarWhereInput>
  }

  export type ChatUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<ChatCreateWithoutUserInput>, Enumerable<ChatUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ChatCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ChatUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ChatCreateManyUserInputEnvelope
    set?: Enumerable<ChatWhereUniqueInput>
    disconnect?: Enumerable<ChatWhereUniqueInput>
    delete?: Enumerable<ChatWhereUniqueInput>
    connect?: Enumerable<ChatWhereUniqueInput>
    update?: Enumerable<ChatUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ChatUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ChatScalarWhereInput>
  }

  export type ProfileUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<ProfileCreateWithoutUserInput>, Enumerable<ProfileUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ProfileCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ProfileUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ProfileCreateManyUserInputEnvelope
    set?: Enumerable<ProfileWhereUniqueInput>
    disconnect?: Enumerable<ProfileWhereUniqueInput>
    delete?: Enumerable<ProfileWhereUniqueInput>
    connect?: Enumerable<ProfileWhereUniqueInput>
    update?: Enumerable<ProfileUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ProfileUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ProfileScalarWhereInput>
  }

  export type PostLikeUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<PostLikeCreateWithoutUserInput>, Enumerable<PostLikeUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<PostLikeCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<PostLikeUpsertWithWhereUniqueWithoutUserInput>
    createMany?: PostLikeCreateManyUserInputEnvelope
    set?: Enumerable<PostLikeWhereUniqueInput>
    disconnect?: Enumerable<PostLikeWhereUniqueInput>
    delete?: Enumerable<PostLikeWhereUniqueInput>
    connect?: Enumerable<PostLikeWhereUniqueInput>
    update?: Enumerable<PostLikeUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<PostLikeUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<PostLikeScalarWhereInput>
  }

  export type Post_CommentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<Post_CommentCreateWithoutUserInput>, Enumerable<Post_CommentUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<Post_CommentCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<Post_CommentUpsertWithWhereUniqueWithoutUserInput>
    createMany?: Post_CommentCreateManyUserInputEnvelope
    set?: Enumerable<Post_CommentWhereUniqueInput>
    disconnect?: Enumerable<Post_CommentWhereUniqueInput>
    delete?: Enumerable<Post_CommentWhereUniqueInput>
    connect?: Enumerable<Post_CommentWhereUniqueInput>
    update?: Enumerable<Post_CommentUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<Post_CommentUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<Post_CommentScalarWhereInput>
  }

  export type ChatUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<ChatCreateWithoutUserInput>, Enumerable<ChatUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ChatCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ChatUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ChatCreateManyUserInputEnvelope
    set?: Enumerable<ChatWhereUniqueInput>
    disconnect?: Enumerable<ChatWhereUniqueInput>
    delete?: Enumerable<ChatWhereUniqueInput>
    connect?: Enumerable<ChatWhereUniqueInput>
    update?: Enumerable<ChatUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ChatUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ChatScalarWhereInput>
  }

  export type ProfileUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<ProfileCreateWithoutUserInput>, Enumerable<ProfileUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ProfileCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ProfileUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ProfileCreateManyUserInputEnvelope
    set?: Enumerable<ProfileWhereUniqueInput>
    disconnect?: Enumerable<ProfileWhereUniqueInput>
    delete?: Enumerable<ProfileWhereUniqueInput>
    connect?: Enumerable<ProfileWhereUniqueInput>
    update?: Enumerable<ProfileUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ProfileUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ProfileScalarWhereInput>
  }

  export type PostCreateNestedManyWithoutMapInput = {
    create?: XOR<Enumerable<PostCreateWithoutMapInput>, Enumerable<PostUncheckedCreateWithoutMapInput>>
    connectOrCreate?: Enumerable<PostCreateOrConnectWithoutMapInput>
    createMany?: PostCreateManyMapInputEnvelope
    connect?: Enumerable<PostWhereUniqueInput>
  }

  export type PostUncheckedCreateNestedManyWithoutMapInput = {
    create?: XOR<Enumerable<PostCreateWithoutMapInput>, Enumerable<PostUncheckedCreateWithoutMapInput>>
    connectOrCreate?: Enumerable<PostCreateOrConnectWithoutMapInput>
    createMany?: PostCreateManyMapInputEnvelope
    connect?: Enumerable<PostWhereUniqueInput>
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PostUpdateManyWithoutMapNestedInput = {
    create?: XOR<Enumerable<PostCreateWithoutMapInput>, Enumerable<PostUncheckedCreateWithoutMapInput>>
    connectOrCreate?: Enumerable<PostCreateOrConnectWithoutMapInput>
    upsert?: Enumerable<PostUpsertWithWhereUniqueWithoutMapInput>
    createMany?: PostCreateManyMapInputEnvelope
    set?: Enumerable<PostWhereUniqueInput>
    disconnect?: Enumerable<PostWhereUniqueInput>
    delete?: Enumerable<PostWhereUniqueInput>
    connect?: Enumerable<PostWhereUniqueInput>
    update?: Enumerable<PostUpdateWithWhereUniqueWithoutMapInput>
    updateMany?: Enumerable<PostUpdateManyWithWhereWithoutMapInput>
    deleteMany?: Enumerable<PostScalarWhereInput>
  }

  export type PostUncheckedUpdateManyWithoutMapNestedInput = {
    create?: XOR<Enumerable<PostCreateWithoutMapInput>, Enumerable<PostUncheckedCreateWithoutMapInput>>
    connectOrCreate?: Enumerable<PostCreateOrConnectWithoutMapInput>
    upsert?: Enumerable<PostUpsertWithWhereUniqueWithoutMapInput>
    createMany?: PostCreateManyMapInputEnvelope
    set?: Enumerable<PostWhereUniqueInput>
    disconnect?: Enumerable<PostWhereUniqueInput>
    delete?: Enumerable<PostWhereUniqueInput>
    connect?: Enumerable<PostWhereUniqueInput>
    update?: Enumerable<PostUpdateWithWhereUniqueWithoutMapInput>
    updateMany?: Enumerable<PostUpdateManyWithWhereWithoutMapInput>
    deleteMany?: Enumerable<PostScalarWhereInput>
  }

  export type MapCreateNestedOneWithoutPostInput = {
    create?: XOR<MapCreateWithoutPostInput, MapUncheckedCreateWithoutPostInput>
    connectOrCreate?: MapCreateOrConnectWithoutPostInput
    connect?: MapWhereUniqueInput
  }

  export type PostLikeCreateNestedManyWithoutPostInput = {
    create?: XOR<Enumerable<PostLikeCreateWithoutPostInput>, Enumerable<PostLikeUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<PostLikeCreateOrConnectWithoutPostInput>
    createMany?: PostLikeCreateManyPostInputEnvelope
    connect?: Enumerable<PostLikeWhereUniqueInput>
  }

  export type Post_CommentCreateNestedManyWithoutPostInput = {
    create?: XOR<Enumerable<Post_CommentCreateWithoutPostInput>, Enumerable<Post_CommentUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<Post_CommentCreateOrConnectWithoutPostInput>
    createMany?: Post_CommentCreateManyPostInputEnvelope
    connect?: Enumerable<Post_CommentWhereUniqueInput>
  }

  export type ChatCreateNestedManyWithoutPostInput = {
    create?: XOR<Enumerable<ChatCreateWithoutPostInput>, Enumerable<ChatUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<ChatCreateOrConnectWithoutPostInput>
    createMany?: ChatCreateManyPostInputEnvelope
    connect?: Enumerable<ChatWhereUniqueInput>
  }

  export type SearchCreateNestedManyWithoutPostInput = {
    create?: XOR<Enumerable<SearchCreateWithoutPostInput>, Enumerable<SearchUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<SearchCreateOrConnectWithoutPostInput>
    createMany?: SearchCreateManyPostInputEnvelope
    connect?: Enumerable<SearchWhereUniqueInput>
  }

  export type ProfileCreateNestedManyWithoutPostInput = {
    create?: XOR<Enumerable<ProfileCreateWithoutPostInput>, Enumerable<ProfileUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<ProfileCreateOrConnectWithoutPostInput>
    createMany?: ProfileCreateManyPostInputEnvelope
    connect?: Enumerable<ProfileWhereUniqueInput>
  }

  export type PostLikeUncheckedCreateNestedManyWithoutPostInput = {
    create?: XOR<Enumerable<PostLikeCreateWithoutPostInput>, Enumerable<PostLikeUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<PostLikeCreateOrConnectWithoutPostInput>
    createMany?: PostLikeCreateManyPostInputEnvelope
    connect?: Enumerable<PostLikeWhereUniqueInput>
  }

  export type Post_CommentUncheckedCreateNestedManyWithoutPostInput = {
    create?: XOR<Enumerable<Post_CommentCreateWithoutPostInput>, Enumerable<Post_CommentUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<Post_CommentCreateOrConnectWithoutPostInput>
    createMany?: Post_CommentCreateManyPostInputEnvelope
    connect?: Enumerable<Post_CommentWhereUniqueInput>
  }

  export type ChatUncheckedCreateNestedManyWithoutPostInput = {
    create?: XOR<Enumerable<ChatCreateWithoutPostInput>, Enumerable<ChatUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<ChatCreateOrConnectWithoutPostInput>
    createMany?: ChatCreateManyPostInputEnvelope
    connect?: Enumerable<ChatWhereUniqueInput>
  }

  export type SearchUncheckedCreateNestedManyWithoutPostInput = {
    create?: XOR<Enumerable<SearchCreateWithoutPostInput>, Enumerable<SearchUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<SearchCreateOrConnectWithoutPostInput>
    createMany?: SearchCreateManyPostInputEnvelope
    connect?: Enumerable<SearchWhereUniqueInput>
  }

  export type ProfileUncheckedCreateNestedManyWithoutPostInput = {
    create?: XOR<Enumerable<ProfileCreateWithoutPostInput>, Enumerable<ProfileUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<ProfileCreateOrConnectWithoutPostInput>
    createMany?: ProfileCreateManyPostInputEnvelope
    connect?: Enumerable<ProfileWhereUniqueInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type MapUpdateOneRequiredWithoutPostNestedInput = {
    create?: XOR<MapCreateWithoutPostInput, MapUncheckedCreateWithoutPostInput>
    connectOrCreate?: MapCreateOrConnectWithoutPostInput
    upsert?: MapUpsertWithoutPostInput
    connect?: MapWhereUniqueInput
    update?: XOR<MapUpdateWithoutPostInput, MapUncheckedUpdateWithoutPostInput>
  }

  export type PostLikeUpdateManyWithoutPostNestedInput = {
    create?: XOR<Enumerable<PostLikeCreateWithoutPostInput>, Enumerable<PostLikeUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<PostLikeCreateOrConnectWithoutPostInput>
    upsert?: Enumerable<PostLikeUpsertWithWhereUniqueWithoutPostInput>
    createMany?: PostLikeCreateManyPostInputEnvelope
    set?: Enumerable<PostLikeWhereUniqueInput>
    disconnect?: Enumerable<PostLikeWhereUniqueInput>
    delete?: Enumerable<PostLikeWhereUniqueInput>
    connect?: Enumerable<PostLikeWhereUniqueInput>
    update?: Enumerable<PostLikeUpdateWithWhereUniqueWithoutPostInput>
    updateMany?: Enumerable<PostLikeUpdateManyWithWhereWithoutPostInput>
    deleteMany?: Enumerable<PostLikeScalarWhereInput>
  }

  export type Post_CommentUpdateManyWithoutPostNestedInput = {
    create?: XOR<Enumerable<Post_CommentCreateWithoutPostInput>, Enumerable<Post_CommentUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<Post_CommentCreateOrConnectWithoutPostInput>
    upsert?: Enumerable<Post_CommentUpsertWithWhereUniqueWithoutPostInput>
    createMany?: Post_CommentCreateManyPostInputEnvelope
    set?: Enumerable<Post_CommentWhereUniqueInput>
    disconnect?: Enumerable<Post_CommentWhereUniqueInput>
    delete?: Enumerable<Post_CommentWhereUniqueInput>
    connect?: Enumerable<Post_CommentWhereUniqueInput>
    update?: Enumerable<Post_CommentUpdateWithWhereUniqueWithoutPostInput>
    updateMany?: Enumerable<Post_CommentUpdateManyWithWhereWithoutPostInput>
    deleteMany?: Enumerable<Post_CommentScalarWhereInput>
  }

  export type ChatUpdateManyWithoutPostNestedInput = {
    create?: XOR<Enumerable<ChatCreateWithoutPostInput>, Enumerable<ChatUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<ChatCreateOrConnectWithoutPostInput>
    upsert?: Enumerable<ChatUpsertWithWhereUniqueWithoutPostInput>
    createMany?: ChatCreateManyPostInputEnvelope
    set?: Enumerable<ChatWhereUniqueInput>
    disconnect?: Enumerable<ChatWhereUniqueInput>
    delete?: Enumerable<ChatWhereUniqueInput>
    connect?: Enumerable<ChatWhereUniqueInput>
    update?: Enumerable<ChatUpdateWithWhereUniqueWithoutPostInput>
    updateMany?: Enumerable<ChatUpdateManyWithWhereWithoutPostInput>
    deleteMany?: Enumerable<ChatScalarWhereInput>
  }

  export type SearchUpdateManyWithoutPostNestedInput = {
    create?: XOR<Enumerable<SearchCreateWithoutPostInput>, Enumerable<SearchUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<SearchCreateOrConnectWithoutPostInput>
    upsert?: Enumerable<SearchUpsertWithWhereUniqueWithoutPostInput>
    createMany?: SearchCreateManyPostInputEnvelope
    set?: Enumerable<SearchWhereUniqueInput>
    disconnect?: Enumerable<SearchWhereUniqueInput>
    delete?: Enumerable<SearchWhereUniqueInput>
    connect?: Enumerable<SearchWhereUniqueInput>
    update?: Enumerable<SearchUpdateWithWhereUniqueWithoutPostInput>
    updateMany?: Enumerable<SearchUpdateManyWithWhereWithoutPostInput>
    deleteMany?: Enumerable<SearchScalarWhereInput>
  }

  export type ProfileUpdateManyWithoutPostNestedInput = {
    create?: XOR<Enumerable<ProfileCreateWithoutPostInput>, Enumerable<ProfileUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<ProfileCreateOrConnectWithoutPostInput>
    upsert?: Enumerable<ProfileUpsertWithWhereUniqueWithoutPostInput>
    createMany?: ProfileCreateManyPostInputEnvelope
    set?: Enumerable<ProfileWhereUniqueInput>
    disconnect?: Enumerable<ProfileWhereUniqueInput>
    delete?: Enumerable<ProfileWhereUniqueInput>
    connect?: Enumerable<ProfileWhereUniqueInput>
    update?: Enumerable<ProfileUpdateWithWhereUniqueWithoutPostInput>
    updateMany?: Enumerable<ProfileUpdateManyWithWhereWithoutPostInput>
    deleteMany?: Enumerable<ProfileScalarWhereInput>
  }

  export type PostLikeUncheckedUpdateManyWithoutPostNestedInput = {
    create?: XOR<Enumerable<PostLikeCreateWithoutPostInput>, Enumerable<PostLikeUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<PostLikeCreateOrConnectWithoutPostInput>
    upsert?: Enumerable<PostLikeUpsertWithWhereUniqueWithoutPostInput>
    createMany?: PostLikeCreateManyPostInputEnvelope
    set?: Enumerable<PostLikeWhereUniqueInput>
    disconnect?: Enumerable<PostLikeWhereUniqueInput>
    delete?: Enumerable<PostLikeWhereUniqueInput>
    connect?: Enumerable<PostLikeWhereUniqueInput>
    update?: Enumerable<PostLikeUpdateWithWhereUniqueWithoutPostInput>
    updateMany?: Enumerable<PostLikeUpdateManyWithWhereWithoutPostInput>
    deleteMany?: Enumerable<PostLikeScalarWhereInput>
  }

  export type Post_CommentUncheckedUpdateManyWithoutPostNestedInput = {
    create?: XOR<Enumerable<Post_CommentCreateWithoutPostInput>, Enumerable<Post_CommentUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<Post_CommentCreateOrConnectWithoutPostInput>
    upsert?: Enumerable<Post_CommentUpsertWithWhereUniqueWithoutPostInput>
    createMany?: Post_CommentCreateManyPostInputEnvelope
    set?: Enumerable<Post_CommentWhereUniqueInput>
    disconnect?: Enumerable<Post_CommentWhereUniqueInput>
    delete?: Enumerable<Post_CommentWhereUniqueInput>
    connect?: Enumerable<Post_CommentWhereUniqueInput>
    update?: Enumerable<Post_CommentUpdateWithWhereUniqueWithoutPostInput>
    updateMany?: Enumerable<Post_CommentUpdateManyWithWhereWithoutPostInput>
    deleteMany?: Enumerable<Post_CommentScalarWhereInput>
  }

  export type ChatUncheckedUpdateManyWithoutPostNestedInput = {
    create?: XOR<Enumerable<ChatCreateWithoutPostInput>, Enumerable<ChatUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<ChatCreateOrConnectWithoutPostInput>
    upsert?: Enumerable<ChatUpsertWithWhereUniqueWithoutPostInput>
    createMany?: ChatCreateManyPostInputEnvelope
    set?: Enumerable<ChatWhereUniqueInput>
    disconnect?: Enumerable<ChatWhereUniqueInput>
    delete?: Enumerable<ChatWhereUniqueInput>
    connect?: Enumerable<ChatWhereUniqueInput>
    update?: Enumerable<ChatUpdateWithWhereUniqueWithoutPostInput>
    updateMany?: Enumerable<ChatUpdateManyWithWhereWithoutPostInput>
    deleteMany?: Enumerable<ChatScalarWhereInput>
  }

  export type SearchUncheckedUpdateManyWithoutPostNestedInput = {
    create?: XOR<Enumerable<SearchCreateWithoutPostInput>, Enumerable<SearchUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<SearchCreateOrConnectWithoutPostInput>
    upsert?: Enumerable<SearchUpsertWithWhereUniqueWithoutPostInput>
    createMany?: SearchCreateManyPostInputEnvelope
    set?: Enumerable<SearchWhereUniqueInput>
    disconnect?: Enumerable<SearchWhereUniqueInput>
    delete?: Enumerable<SearchWhereUniqueInput>
    connect?: Enumerable<SearchWhereUniqueInput>
    update?: Enumerable<SearchUpdateWithWhereUniqueWithoutPostInput>
    updateMany?: Enumerable<SearchUpdateManyWithWhereWithoutPostInput>
    deleteMany?: Enumerable<SearchScalarWhereInput>
  }

  export type ProfileUncheckedUpdateManyWithoutPostNestedInput = {
    create?: XOR<Enumerable<ProfileCreateWithoutPostInput>, Enumerable<ProfileUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<ProfileCreateOrConnectWithoutPostInput>
    upsert?: Enumerable<ProfileUpsertWithWhereUniqueWithoutPostInput>
    createMany?: ProfileCreateManyPostInputEnvelope
    set?: Enumerable<ProfileWhereUniqueInput>
    disconnect?: Enumerable<ProfileWhereUniqueInput>
    delete?: Enumerable<ProfileWhereUniqueInput>
    connect?: Enumerable<ProfileWhereUniqueInput>
    update?: Enumerable<ProfileUpdateWithWhereUniqueWithoutPostInput>
    updateMany?: Enumerable<ProfileUpdateManyWithWhereWithoutPostInput>
    deleteMany?: Enumerable<ProfileScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutPostlikeInput = {
    create?: XOR<UserCreateWithoutPostlikeInput, UserUncheckedCreateWithoutPostlikeInput>
    connectOrCreate?: UserCreateOrConnectWithoutPostlikeInput
    connect?: UserWhereUniqueInput
  }

  export type PostCreateNestedOneWithoutPostlikeInput = {
    create?: XOR<PostCreateWithoutPostlikeInput, PostUncheckedCreateWithoutPostlikeInput>
    connectOrCreate?: PostCreateOrConnectWithoutPostlikeInput
    connect?: PostWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutPostlikeNestedInput = {
    create?: XOR<UserCreateWithoutPostlikeInput, UserUncheckedCreateWithoutPostlikeInput>
    connectOrCreate?: UserCreateOrConnectWithoutPostlikeInput
    upsert?: UserUpsertWithoutPostlikeInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutPostlikeInput, UserUncheckedUpdateWithoutPostlikeInput>
  }

  export type PostUpdateOneRequiredWithoutPostlikeNestedInput = {
    create?: XOR<PostCreateWithoutPostlikeInput, PostUncheckedCreateWithoutPostlikeInput>
    connectOrCreate?: PostCreateOrConnectWithoutPostlikeInput
    upsert?: PostUpsertWithoutPostlikeInput
    connect?: PostWhereUniqueInput
    update?: XOR<PostUpdateWithoutPostlikeInput, PostUncheckedUpdateWithoutPostlikeInput>
  }

  export type PostCreateNestedOneWithoutPostcommentInput = {
    create?: XOR<PostCreateWithoutPostcommentInput, PostUncheckedCreateWithoutPostcommentInput>
    connectOrCreate?: PostCreateOrConnectWithoutPostcommentInput
    connect?: PostWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutPostcommentInput = {
    create?: XOR<UserCreateWithoutPostcommentInput, UserUncheckedCreateWithoutPostcommentInput>
    connectOrCreate?: UserCreateOrConnectWithoutPostcommentInput
    connect?: UserWhereUniqueInput
  }

  export type ProfileCreateNestedManyWithoutPostcommentInput = {
    create?: XOR<Enumerable<ProfileCreateWithoutPostcommentInput>, Enumerable<ProfileUncheckedCreateWithoutPostcommentInput>>
    connectOrCreate?: Enumerable<ProfileCreateOrConnectWithoutPostcommentInput>
    createMany?: ProfileCreateManyPostcommentInputEnvelope
    connect?: Enumerable<ProfileWhereUniqueInput>
  }

  export type ProfileUncheckedCreateNestedManyWithoutPostcommentInput = {
    create?: XOR<Enumerable<ProfileCreateWithoutPostcommentInput>, Enumerable<ProfileUncheckedCreateWithoutPostcommentInput>>
    connectOrCreate?: Enumerable<ProfileCreateOrConnectWithoutPostcommentInput>
    createMany?: ProfileCreateManyPostcommentInputEnvelope
    connect?: Enumerable<ProfileWhereUniqueInput>
  }

  export type PostUpdateOneRequiredWithoutPostcommentNestedInput = {
    create?: XOR<PostCreateWithoutPostcommentInput, PostUncheckedCreateWithoutPostcommentInput>
    connectOrCreate?: PostCreateOrConnectWithoutPostcommentInput
    upsert?: PostUpsertWithoutPostcommentInput
    connect?: PostWhereUniqueInput
    update?: XOR<PostUpdateWithoutPostcommentInput, PostUncheckedUpdateWithoutPostcommentInput>
  }

  export type UserUpdateOneRequiredWithoutPostcommentNestedInput = {
    create?: XOR<UserCreateWithoutPostcommentInput, UserUncheckedCreateWithoutPostcommentInput>
    connectOrCreate?: UserCreateOrConnectWithoutPostcommentInput
    upsert?: UserUpsertWithoutPostcommentInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutPostcommentInput, UserUncheckedUpdateWithoutPostcommentInput>
  }

  export type ProfileUpdateManyWithoutPostcommentNestedInput = {
    create?: XOR<Enumerable<ProfileCreateWithoutPostcommentInput>, Enumerable<ProfileUncheckedCreateWithoutPostcommentInput>>
    connectOrCreate?: Enumerable<ProfileCreateOrConnectWithoutPostcommentInput>
    upsert?: Enumerable<ProfileUpsertWithWhereUniqueWithoutPostcommentInput>
    createMany?: ProfileCreateManyPostcommentInputEnvelope
    set?: Enumerable<ProfileWhereUniqueInput>
    disconnect?: Enumerable<ProfileWhereUniqueInput>
    delete?: Enumerable<ProfileWhereUniqueInput>
    connect?: Enumerable<ProfileWhereUniqueInput>
    update?: Enumerable<ProfileUpdateWithWhereUniqueWithoutPostcommentInput>
    updateMany?: Enumerable<ProfileUpdateManyWithWhereWithoutPostcommentInput>
    deleteMany?: Enumerable<ProfileScalarWhereInput>
  }

  export type ProfileUncheckedUpdateManyWithoutPostcommentNestedInput = {
    create?: XOR<Enumerable<ProfileCreateWithoutPostcommentInput>, Enumerable<ProfileUncheckedCreateWithoutPostcommentInput>>
    connectOrCreate?: Enumerable<ProfileCreateOrConnectWithoutPostcommentInput>
    upsert?: Enumerable<ProfileUpsertWithWhereUniqueWithoutPostcommentInput>
    createMany?: ProfileCreateManyPostcommentInputEnvelope
    set?: Enumerable<ProfileWhereUniqueInput>
    disconnect?: Enumerable<ProfileWhereUniqueInput>
    delete?: Enumerable<ProfileWhereUniqueInput>
    connect?: Enumerable<ProfileWhereUniqueInput>
    update?: Enumerable<ProfileUpdateWithWhereUniqueWithoutPostcommentInput>
    updateMany?: Enumerable<ProfileUpdateManyWithWhereWithoutPostcommentInput>
    deleteMany?: Enumerable<ProfileScalarWhereInput>
  }

  export type PostCreateNestedOneWithoutChatInput = {
    create?: XOR<PostCreateWithoutChatInput, PostUncheckedCreateWithoutChatInput>
    connectOrCreate?: PostCreateOrConnectWithoutChatInput
    connect?: PostWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutChatInput = {
    create?: XOR<UserCreateWithoutChatInput, UserUncheckedCreateWithoutChatInput>
    connectOrCreate?: UserCreateOrConnectWithoutChatInput
    connect?: UserWhereUniqueInput
  }

  export type PostUpdateOneRequiredWithoutChatNestedInput = {
    create?: XOR<PostCreateWithoutChatInput, PostUncheckedCreateWithoutChatInput>
    connectOrCreate?: PostCreateOrConnectWithoutChatInput
    upsert?: PostUpsertWithoutChatInput
    connect?: PostWhereUniqueInput
    update?: XOR<PostUpdateWithoutChatInput, PostUncheckedUpdateWithoutChatInput>
  }

  export type UserUpdateOneRequiredWithoutChatNestedInput = {
    create?: XOR<UserCreateWithoutChatInput, UserUncheckedCreateWithoutChatInput>
    connectOrCreate?: UserCreateOrConnectWithoutChatInput
    upsert?: UserUpsertWithoutChatInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutChatInput, UserUncheckedUpdateWithoutChatInput>
  }

  export type PostCreateNestedOneWithoutSearchInput = {
    create?: XOR<PostCreateWithoutSearchInput, PostUncheckedCreateWithoutSearchInput>
    connectOrCreate?: PostCreateOrConnectWithoutSearchInput
    connect?: PostWhereUniqueInput
  }

  export type PostUpdateOneRequiredWithoutSearchNestedInput = {
    create?: XOR<PostCreateWithoutSearchInput, PostUncheckedCreateWithoutSearchInput>
    connectOrCreate?: PostCreateOrConnectWithoutSearchInput
    upsert?: PostUpsertWithoutSearchInput
    connect?: PostWhereUniqueInput
    update?: XOR<PostUpdateWithoutSearchInput, PostUncheckedUpdateWithoutSearchInput>
  }

  export type UserCreateNestedOneWithoutProfileInput = {
    create?: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfileInput
    connect?: UserWhereUniqueInput
  }

  export type PostCreateNestedOneWithoutProfileInput = {
    create?: XOR<PostCreateWithoutProfileInput, PostUncheckedCreateWithoutProfileInput>
    connectOrCreate?: PostCreateOrConnectWithoutProfileInput
    connect?: PostWhereUniqueInput
  }

  export type Post_CommentCreateNestedOneWithoutProfileInput = {
    create?: XOR<Post_CommentCreateWithoutProfileInput, Post_CommentUncheckedCreateWithoutProfileInput>
    connectOrCreate?: Post_CommentCreateOrConnectWithoutProfileInput
    connect?: Post_CommentWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutProfileNestedInput = {
    create?: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfileInput
    upsert?: UserUpsertWithoutProfileInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutProfileInput, UserUncheckedUpdateWithoutProfileInput>
  }

  export type PostUpdateOneRequiredWithoutProfileNestedInput = {
    create?: XOR<PostCreateWithoutProfileInput, PostUncheckedCreateWithoutProfileInput>
    connectOrCreate?: PostCreateOrConnectWithoutProfileInput
    upsert?: PostUpsertWithoutProfileInput
    connect?: PostWhereUniqueInput
    update?: XOR<PostUpdateWithoutProfileInput, PostUncheckedUpdateWithoutProfileInput>
  }

  export type Post_CommentUpdateOneWithoutProfileNestedInput = {
    create?: XOR<Post_CommentCreateWithoutProfileInput, Post_CommentUncheckedCreateWithoutProfileInput>
    connectOrCreate?: Post_CommentCreateOrConnectWithoutProfileInput
    upsert?: Post_CommentUpsertWithoutProfileInput
    disconnect?: boolean
    delete?: boolean
    connect?: Post_CommentWhereUniqueInput
    update?: XOR<Post_CommentUpdateWithoutProfileInput, Post_CommentUncheckedUpdateWithoutProfileInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedFloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type PostLikeCreateWithoutUserInput = {
    post: PostCreateNestedOneWithoutPostlikeInput
  }

  export type PostLikeUncheckedCreateWithoutUserInput = {
    post_id: number
  }

  export type PostLikeCreateOrConnectWithoutUserInput = {
    where: PostLikeWhereUniqueInput
    create: XOR<PostLikeCreateWithoutUserInput, PostLikeUncheckedCreateWithoutUserInput>
  }

  export type PostLikeCreateManyUserInputEnvelope = {
    data: Enumerable<PostLikeCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type Post_CommentCreateWithoutUserInput = {
    content: string
    star: number
    createdAt?: Date | string
    post: PostCreateNestedOneWithoutPostcommentInput
    profile?: ProfileCreateNestedManyWithoutPostcommentInput
  }

  export type Post_CommentUncheckedCreateWithoutUserInput = {
    id?: number
    content: string
    star: number
    createdAt?: Date | string
    post_id: number
    profile?: ProfileUncheckedCreateNestedManyWithoutPostcommentInput
  }

  export type Post_CommentCreateOrConnectWithoutUserInput = {
    where: Post_CommentWhereUniqueInput
    create: XOR<Post_CommentCreateWithoutUserInput, Post_CommentUncheckedCreateWithoutUserInput>
  }

  export type Post_CommentCreateManyUserInputEnvelope = {
    data: Enumerable<Post_CommentCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type ChatCreateWithoutUserInput = {
    message: string
    post: PostCreateNestedOneWithoutChatInput
  }

  export type ChatUncheckedCreateWithoutUserInput = {
    id?: number
    message: string
    post_id: number
  }

  export type ChatCreateOrConnectWithoutUserInput = {
    where: ChatWhereUniqueInput
    create: XOR<ChatCreateWithoutUserInput, ChatUncheckedCreateWithoutUserInput>
  }

  export type ChatCreateManyUserInputEnvelope = {
    data: Enumerable<ChatCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type ProfileCreateWithoutUserInput = {
    post: PostCreateNestedOneWithoutProfileInput
    postcomment?: Post_CommentCreateNestedOneWithoutProfileInput
  }

  export type ProfileUncheckedCreateWithoutUserInput = {
    id?: number
    post_id: number
    postcomment_id?: number | null
  }

  export type ProfileCreateOrConnectWithoutUserInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
  }

  export type ProfileCreateManyUserInputEnvelope = {
    data: Enumerable<ProfileCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type PostLikeUpsertWithWhereUniqueWithoutUserInput = {
    where: PostLikeWhereUniqueInput
    update: XOR<PostLikeUpdateWithoutUserInput, PostLikeUncheckedUpdateWithoutUserInput>
    create: XOR<PostLikeCreateWithoutUserInput, PostLikeUncheckedCreateWithoutUserInput>
  }

  export type PostLikeUpdateWithWhereUniqueWithoutUserInput = {
    where: PostLikeWhereUniqueInput
    data: XOR<PostLikeUpdateWithoutUserInput, PostLikeUncheckedUpdateWithoutUserInput>
  }

  export type PostLikeUpdateManyWithWhereWithoutUserInput = {
    where: PostLikeScalarWhereInput
    data: XOR<PostLikeUpdateManyMutationInput, PostLikeUncheckedUpdateManyWithoutPostlikeInput>
  }

  export type PostLikeScalarWhereInput = {
    AND?: Enumerable<PostLikeScalarWhereInput>
    OR?: Enumerable<PostLikeScalarWhereInput>
    NOT?: Enumerable<PostLikeScalarWhereInput>
    user_id?: IntFilter | number
    post_id?: IntFilter | number
  }

  export type Post_CommentUpsertWithWhereUniqueWithoutUserInput = {
    where: Post_CommentWhereUniqueInput
    update: XOR<Post_CommentUpdateWithoutUserInput, Post_CommentUncheckedUpdateWithoutUserInput>
    create: XOR<Post_CommentCreateWithoutUserInput, Post_CommentUncheckedCreateWithoutUserInput>
  }

  export type Post_CommentUpdateWithWhereUniqueWithoutUserInput = {
    where: Post_CommentWhereUniqueInput
    data: XOR<Post_CommentUpdateWithoutUserInput, Post_CommentUncheckedUpdateWithoutUserInput>
  }

  export type Post_CommentUpdateManyWithWhereWithoutUserInput = {
    where: Post_CommentScalarWhereInput
    data: XOR<Post_CommentUpdateManyMutationInput, Post_CommentUncheckedUpdateManyWithoutPostcommentInput>
  }

  export type Post_CommentScalarWhereInput = {
    AND?: Enumerable<Post_CommentScalarWhereInput>
    OR?: Enumerable<Post_CommentScalarWhereInput>
    NOT?: Enumerable<Post_CommentScalarWhereInput>
    id?: IntFilter | number
    content?: StringFilter | string
    star?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    post_id?: IntFilter | number
    user_id?: IntFilter | number
  }

  export type ChatUpsertWithWhereUniqueWithoutUserInput = {
    where: ChatWhereUniqueInput
    update: XOR<ChatUpdateWithoutUserInput, ChatUncheckedUpdateWithoutUserInput>
    create: XOR<ChatCreateWithoutUserInput, ChatUncheckedCreateWithoutUserInput>
  }

  export type ChatUpdateWithWhereUniqueWithoutUserInput = {
    where: ChatWhereUniqueInput
    data: XOR<ChatUpdateWithoutUserInput, ChatUncheckedUpdateWithoutUserInput>
  }

  export type ChatUpdateManyWithWhereWithoutUserInput = {
    where: ChatScalarWhereInput
    data: XOR<ChatUpdateManyMutationInput, ChatUncheckedUpdateManyWithoutChatInput>
  }

  export type ChatScalarWhereInput = {
    AND?: Enumerable<ChatScalarWhereInput>
    OR?: Enumerable<ChatScalarWhereInput>
    NOT?: Enumerable<ChatScalarWhereInput>
    id?: IntFilter | number
    message?: StringFilter | string
    post_id?: IntFilter | number
    user_id?: IntFilter | number
  }

  export type ProfileUpsertWithWhereUniqueWithoutUserInput = {
    where: ProfileWhereUniqueInput
    update: XOR<ProfileUpdateWithoutUserInput, ProfileUncheckedUpdateWithoutUserInput>
    create: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
  }

  export type ProfileUpdateWithWhereUniqueWithoutUserInput = {
    where: ProfileWhereUniqueInput
    data: XOR<ProfileUpdateWithoutUserInput, ProfileUncheckedUpdateWithoutUserInput>
  }

  export type ProfileUpdateManyWithWhereWithoutUserInput = {
    where: ProfileScalarWhereInput
    data: XOR<ProfileUpdateManyMutationInput, ProfileUncheckedUpdateManyWithoutProfileInput>
  }

  export type ProfileScalarWhereInput = {
    AND?: Enumerable<ProfileScalarWhereInput>
    OR?: Enumerable<ProfileScalarWhereInput>
    NOT?: Enumerable<ProfileScalarWhereInput>
    id?: IntFilter | number
    user_id?: IntFilter | number
    post_id?: IntFilter | number
    postcomment_id?: IntNullableFilter | number | null
  }

  export type PostCreateWithoutMapInput = {
    title: string
    info: string
    src_url?: string | null
    createdAt?: Date | string
    postlike?: PostLikeCreateNestedManyWithoutPostInput
    postcomment?: Post_CommentCreateNestedManyWithoutPostInput
    chat?: ChatCreateNestedManyWithoutPostInput
    search?: SearchCreateNestedManyWithoutPostInput
    profile?: ProfileCreateNestedManyWithoutPostInput
  }

  export type PostUncheckedCreateWithoutMapInput = {
    id?: number
    title: string
    info: string
    src_url?: string | null
    createdAt?: Date | string
    postlike?: PostLikeUncheckedCreateNestedManyWithoutPostInput
    postcomment?: Post_CommentUncheckedCreateNestedManyWithoutPostInput
    chat?: ChatUncheckedCreateNestedManyWithoutPostInput
    search?: SearchUncheckedCreateNestedManyWithoutPostInput
    profile?: ProfileUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostCreateOrConnectWithoutMapInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutMapInput, PostUncheckedCreateWithoutMapInput>
  }

  export type PostCreateManyMapInputEnvelope = {
    data: Enumerable<PostCreateManyMapInput>
    skipDuplicates?: boolean
  }

  export type PostUpsertWithWhereUniqueWithoutMapInput = {
    where: PostWhereUniqueInput
    update: XOR<PostUpdateWithoutMapInput, PostUncheckedUpdateWithoutMapInput>
    create: XOR<PostCreateWithoutMapInput, PostUncheckedCreateWithoutMapInput>
  }

  export type PostUpdateWithWhereUniqueWithoutMapInput = {
    where: PostWhereUniqueInput
    data: XOR<PostUpdateWithoutMapInput, PostUncheckedUpdateWithoutMapInput>
  }

  export type PostUpdateManyWithWhereWithoutMapInput = {
    where: PostScalarWhereInput
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyWithoutPostInput>
  }

  export type PostScalarWhereInput = {
    AND?: Enumerable<PostScalarWhereInput>
    OR?: Enumerable<PostScalarWhereInput>
    NOT?: Enumerable<PostScalarWhereInput>
    id?: IntFilter | number
    title?: StringFilter | string
    info?: StringFilter | string
    src_url?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    map_id?: IntFilter | number
  }

  export type MapCreateWithoutPostInput = {
    lat: number
    long: number
    title: string
    address: string
    install_date?: Date | string
    pri_pub_div: string
    in_out_div: string
  }

  export type MapUncheckedCreateWithoutPostInput = {
    id?: number
    lat: number
    long: number
    title: string
    address: string
    install_date?: Date | string
    pri_pub_div: string
    in_out_div: string
  }

  export type MapCreateOrConnectWithoutPostInput = {
    where: MapWhereUniqueInput
    create: XOR<MapCreateWithoutPostInput, MapUncheckedCreateWithoutPostInput>
  }

  export type PostLikeCreateWithoutPostInput = {
    user: UserCreateNestedOneWithoutPostlikeInput
  }

  export type PostLikeUncheckedCreateWithoutPostInput = {
    user_id: number
  }

  export type PostLikeCreateOrConnectWithoutPostInput = {
    where: PostLikeWhereUniqueInput
    create: XOR<PostLikeCreateWithoutPostInput, PostLikeUncheckedCreateWithoutPostInput>
  }

  export type PostLikeCreateManyPostInputEnvelope = {
    data: Enumerable<PostLikeCreateManyPostInput>
    skipDuplicates?: boolean
  }

  export type Post_CommentCreateWithoutPostInput = {
    content: string
    star: number
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutPostcommentInput
    profile?: ProfileCreateNestedManyWithoutPostcommentInput
  }

  export type Post_CommentUncheckedCreateWithoutPostInput = {
    id?: number
    content: string
    star: number
    createdAt?: Date | string
    user_id: number
    profile?: ProfileUncheckedCreateNestedManyWithoutPostcommentInput
  }

  export type Post_CommentCreateOrConnectWithoutPostInput = {
    where: Post_CommentWhereUniqueInput
    create: XOR<Post_CommentCreateWithoutPostInput, Post_CommentUncheckedCreateWithoutPostInput>
  }

  export type Post_CommentCreateManyPostInputEnvelope = {
    data: Enumerable<Post_CommentCreateManyPostInput>
    skipDuplicates?: boolean
  }

  export type ChatCreateWithoutPostInput = {
    message: string
    user: UserCreateNestedOneWithoutChatInput
  }

  export type ChatUncheckedCreateWithoutPostInput = {
    id?: number
    message: string
    user_id: number
  }

  export type ChatCreateOrConnectWithoutPostInput = {
    where: ChatWhereUniqueInput
    create: XOR<ChatCreateWithoutPostInput, ChatUncheckedCreateWithoutPostInput>
  }

  export type ChatCreateManyPostInputEnvelope = {
    data: Enumerable<ChatCreateManyPostInput>
    skipDuplicates?: boolean
  }

  export type SearchCreateWithoutPostInput = {
    search_title: string
  }

  export type SearchUncheckedCreateWithoutPostInput = {
    id?: number
    search_title: string
  }

  export type SearchCreateOrConnectWithoutPostInput = {
    where: SearchWhereUniqueInput
    create: XOR<SearchCreateWithoutPostInput, SearchUncheckedCreateWithoutPostInput>
  }

  export type SearchCreateManyPostInputEnvelope = {
    data: Enumerable<SearchCreateManyPostInput>
    skipDuplicates?: boolean
  }

  export type ProfileCreateWithoutPostInput = {
    user: UserCreateNestedOneWithoutProfileInput
    postcomment?: Post_CommentCreateNestedOneWithoutProfileInput
  }

  export type ProfileUncheckedCreateWithoutPostInput = {
    id?: number
    user_id: number
    postcomment_id?: number | null
  }

  export type ProfileCreateOrConnectWithoutPostInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutPostInput, ProfileUncheckedCreateWithoutPostInput>
  }

  export type ProfileCreateManyPostInputEnvelope = {
    data: Enumerable<ProfileCreateManyPostInput>
    skipDuplicates?: boolean
  }

  export type MapUpsertWithoutPostInput = {
    update: XOR<MapUpdateWithoutPostInput, MapUncheckedUpdateWithoutPostInput>
    create: XOR<MapCreateWithoutPostInput, MapUncheckedCreateWithoutPostInput>
  }

  export type MapUpdateWithoutPostInput = {
    lat?: FloatFieldUpdateOperationsInput | number
    long?: FloatFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    install_date?: DateTimeFieldUpdateOperationsInput | Date | string
    pri_pub_div?: StringFieldUpdateOperationsInput | string
    in_out_div?: StringFieldUpdateOperationsInput | string
  }

  export type MapUncheckedUpdateWithoutPostInput = {
    id?: IntFieldUpdateOperationsInput | number
    lat?: FloatFieldUpdateOperationsInput | number
    long?: FloatFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    install_date?: DateTimeFieldUpdateOperationsInput | Date | string
    pri_pub_div?: StringFieldUpdateOperationsInput | string
    in_out_div?: StringFieldUpdateOperationsInput | string
  }

  export type PostLikeUpsertWithWhereUniqueWithoutPostInput = {
    where: PostLikeWhereUniqueInput
    update: XOR<PostLikeUpdateWithoutPostInput, PostLikeUncheckedUpdateWithoutPostInput>
    create: XOR<PostLikeCreateWithoutPostInput, PostLikeUncheckedCreateWithoutPostInput>
  }

  export type PostLikeUpdateWithWhereUniqueWithoutPostInput = {
    where: PostLikeWhereUniqueInput
    data: XOR<PostLikeUpdateWithoutPostInput, PostLikeUncheckedUpdateWithoutPostInput>
  }

  export type PostLikeUpdateManyWithWhereWithoutPostInput = {
    where: PostLikeScalarWhereInput
    data: XOR<PostLikeUpdateManyMutationInput, PostLikeUncheckedUpdateManyWithoutPostlikeInput>
  }

  export type Post_CommentUpsertWithWhereUniqueWithoutPostInput = {
    where: Post_CommentWhereUniqueInput
    update: XOR<Post_CommentUpdateWithoutPostInput, Post_CommentUncheckedUpdateWithoutPostInput>
    create: XOR<Post_CommentCreateWithoutPostInput, Post_CommentUncheckedCreateWithoutPostInput>
  }

  export type Post_CommentUpdateWithWhereUniqueWithoutPostInput = {
    where: Post_CommentWhereUniqueInput
    data: XOR<Post_CommentUpdateWithoutPostInput, Post_CommentUncheckedUpdateWithoutPostInput>
  }

  export type Post_CommentUpdateManyWithWhereWithoutPostInput = {
    where: Post_CommentScalarWhereInput
    data: XOR<Post_CommentUpdateManyMutationInput, Post_CommentUncheckedUpdateManyWithoutPostcommentInput>
  }

  export type ChatUpsertWithWhereUniqueWithoutPostInput = {
    where: ChatWhereUniqueInput
    update: XOR<ChatUpdateWithoutPostInput, ChatUncheckedUpdateWithoutPostInput>
    create: XOR<ChatCreateWithoutPostInput, ChatUncheckedCreateWithoutPostInput>
  }

  export type ChatUpdateWithWhereUniqueWithoutPostInput = {
    where: ChatWhereUniqueInput
    data: XOR<ChatUpdateWithoutPostInput, ChatUncheckedUpdateWithoutPostInput>
  }

  export type ChatUpdateManyWithWhereWithoutPostInput = {
    where: ChatScalarWhereInput
    data: XOR<ChatUpdateManyMutationInput, ChatUncheckedUpdateManyWithoutChatInput>
  }

  export type SearchUpsertWithWhereUniqueWithoutPostInput = {
    where: SearchWhereUniqueInput
    update: XOR<SearchUpdateWithoutPostInput, SearchUncheckedUpdateWithoutPostInput>
    create: XOR<SearchCreateWithoutPostInput, SearchUncheckedCreateWithoutPostInput>
  }

  export type SearchUpdateWithWhereUniqueWithoutPostInput = {
    where: SearchWhereUniqueInput
    data: XOR<SearchUpdateWithoutPostInput, SearchUncheckedUpdateWithoutPostInput>
  }

  export type SearchUpdateManyWithWhereWithoutPostInput = {
    where: SearchScalarWhereInput
    data: XOR<SearchUpdateManyMutationInput, SearchUncheckedUpdateManyWithoutSearchInput>
  }

  export type SearchScalarWhereInput = {
    AND?: Enumerable<SearchScalarWhereInput>
    OR?: Enumerable<SearchScalarWhereInput>
    NOT?: Enumerable<SearchScalarWhereInput>
    id?: IntFilter | number
    search_title?: StringFilter | string
    post_id?: IntFilter | number
  }

  export type ProfileUpsertWithWhereUniqueWithoutPostInput = {
    where: ProfileWhereUniqueInput
    update: XOR<ProfileUpdateWithoutPostInput, ProfileUncheckedUpdateWithoutPostInput>
    create: XOR<ProfileCreateWithoutPostInput, ProfileUncheckedCreateWithoutPostInput>
  }

  export type ProfileUpdateWithWhereUniqueWithoutPostInput = {
    where: ProfileWhereUniqueInput
    data: XOR<ProfileUpdateWithoutPostInput, ProfileUncheckedUpdateWithoutPostInput>
  }

  export type ProfileUpdateManyWithWhereWithoutPostInput = {
    where: ProfileScalarWhereInput
    data: XOR<ProfileUpdateManyMutationInput, ProfileUncheckedUpdateManyWithoutProfileInput>
  }

  export type UserCreateWithoutPostlikeInput = {
    email: string
    name: string
    phoneNumber: string
    password: string
    profile_img_num: number
    createdAt?: Date | string
    postcomment?: Post_CommentCreateNestedManyWithoutUserInput
    chat?: ChatCreateNestedManyWithoutUserInput
    profile?: ProfileCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPostlikeInput = {
    id?: number
    email: string
    name: string
    phoneNumber: string
    password: string
    profile_img_num: number
    createdAt?: Date | string
    postcomment?: Post_CommentUncheckedCreateNestedManyWithoutUserInput
    chat?: ChatUncheckedCreateNestedManyWithoutUserInput
    profile?: ProfileUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPostlikeInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPostlikeInput, UserUncheckedCreateWithoutPostlikeInput>
  }

  export type PostCreateWithoutPostlikeInput = {
    title: string
    info: string
    src_url?: string | null
    createdAt?: Date | string
    map: MapCreateNestedOneWithoutPostInput
    postcomment?: Post_CommentCreateNestedManyWithoutPostInput
    chat?: ChatCreateNestedManyWithoutPostInput
    search?: SearchCreateNestedManyWithoutPostInput
    profile?: ProfileCreateNestedManyWithoutPostInput
  }

  export type PostUncheckedCreateWithoutPostlikeInput = {
    id?: number
    title: string
    info: string
    src_url?: string | null
    createdAt?: Date | string
    map_id: number
    postcomment?: Post_CommentUncheckedCreateNestedManyWithoutPostInput
    chat?: ChatUncheckedCreateNestedManyWithoutPostInput
    search?: SearchUncheckedCreateNestedManyWithoutPostInput
    profile?: ProfileUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostCreateOrConnectWithoutPostlikeInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutPostlikeInput, PostUncheckedCreateWithoutPostlikeInput>
  }

  export type UserUpsertWithoutPostlikeInput = {
    update: XOR<UserUpdateWithoutPostlikeInput, UserUncheckedUpdateWithoutPostlikeInput>
    create: XOR<UserCreateWithoutPostlikeInput, UserUncheckedCreateWithoutPostlikeInput>
  }

  export type UserUpdateWithoutPostlikeInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile_img_num?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    postcomment?: Post_CommentUpdateManyWithoutUserNestedInput
    chat?: ChatUpdateManyWithoutUserNestedInput
    profile?: ProfileUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPostlikeInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile_img_num?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    postcomment?: Post_CommentUncheckedUpdateManyWithoutUserNestedInput
    chat?: ChatUncheckedUpdateManyWithoutUserNestedInput
    profile?: ProfileUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PostUpsertWithoutPostlikeInput = {
    update: XOR<PostUpdateWithoutPostlikeInput, PostUncheckedUpdateWithoutPostlikeInput>
    create: XOR<PostCreateWithoutPostlikeInput, PostUncheckedCreateWithoutPostlikeInput>
  }

  export type PostUpdateWithoutPostlikeInput = {
    title?: StringFieldUpdateOperationsInput | string
    info?: StringFieldUpdateOperationsInput | string
    src_url?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    map?: MapUpdateOneRequiredWithoutPostNestedInput
    postcomment?: Post_CommentUpdateManyWithoutPostNestedInput
    chat?: ChatUpdateManyWithoutPostNestedInput
    search?: SearchUpdateManyWithoutPostNestedInput
    profile?: ProfileUpdateManyWithoutPostNestedInput
  }

  export type PostUncheckedUpdateWithoutPostlikeInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    info?: StringFieldUpdateOperationsInput | string
    src_url?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    map_id?: IntFieldUpdateOperationsInput | number
    postcomment?: Post_CommentUncheckedUpdateManyWithoutPostNestedInput
    chat?: ChatUncheckedUpdateManyWithoutPostNestedInput
    search?: SearchUncheckedUpdateManyWithoutPostNestedInput
    profile?: ProfileUncheckedUpdateManyWithoutPostNestedInput
  }

  export type PostCreateWithoutPostcommentInput = {
    title: string
    info: string
    src_url?: string | null
    createdAt?: Date | string
    map: MapCreateNestedOneWithoutPostInput
    postlike?: PostLikeCreateNestedManyWithoutPostInput
    chat?: ChatCreateNestedManyWithoutPostInput
    search?: SearchCreateNestedManyWithoutPostInput
    profile?: ProfileCreateNestedManyWithoutPostInput
  }

  export type PostUncheckedCreateWithoutPostcommentInput = {
    id?: number
    title: string
    info: string
    src_url?: string | null
    createdAt?: Date | string
    map_id: number
    postlike?: PostLikeUncheckedCreateNestedManyWithoutPostInput
    chat?: ChatUncheckedCreateNestedManyWithoutPostInput
    search?: SearchUncheckedCreateNestedManyWithoutPostInput
    profile?: ProfileUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostCreateOrConnectWithoutPostcommentInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutPostcommentInput, PostUncheckedCreateWithoutPostcommentInput>
  }

  export type UserCreateWithoutPostcommentInput = {
    email: string
    name: string
    phoneNumber: string
    password: string
    profile_img_num: number
    createdAt?: Date | string
    postlike?: PostLikeCreateNestedManyWithoutUserInput
    chat?: ChatCreateNestedManyWithoutUserInput
    profile?: ProfileCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPostcommentInput = {
    id?: number
    email: string
    name: string
    phoneNumber: string
    password: string
    profile_img_num: number
    createdAt?: Date | string
    postlike?: PostLikeUncheckedCreateNestedManyWithoutUserInput
    chat?: ChatUncheckedCreateNestedManyWithoutUserInput
    profile?: ProfileUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPostcommentInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPostcommentInput, UserUncheckedCreateWithoutPostcommentInput>
  }

  export type ProfileCreateWithoutPostcommentInput = {
    user: UserCreateNestedOneWithoutProfileInput
    post: PostCreateNestedOneWithoutProfileInput
  }

  export type ProfileUncheckedCreateWithoutPostcommentInput = {
    id?: number
    user_id: number
    post_id: number
  }

  export type ProfileCreateOrConnectWithoutPostcommentInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutPostcommentInput, ProfileUncheckedCreateWithoutPostcommentInput>
  }

  export type ProfileCreateManyPostcommentInputEnvelope = {
    data: Enumerable<ProfileCreateManyPostcommentInput>
    skipDuplicates?: boolean
  }

  export type PostUpsertWithoutPostcommentInput = {
    update: XOR<PostUpdateWithoutPostcommentInput, PostUncheckedUpdateWithoutPostcommentInput>
    create: XOR<PostCreateWithoutPostcommentInput, PostUncheckedCreateWithoutPostcommentInput>
  }

  export type PostUpdateWithoutPostcommentInput = {
    title?: StringFieldUpdateOperationsInput | string
    info?: StringFieldUpdateOperationsInput | string
    src_url?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    map?: MapUpdateOneRequiredWithoutPostNestedInput
    postlike?: PostLikeUpdateManyWithoutPostNestedInput
    chat?: ChatUpdateManyWithoutPostNestedInput
    search?: SearchUpdateManyWithoutPostNestedInput
    profile?: ProfileUpdateManyWithoutPostNestedInput
  }

  export type PostUncheckedUpdateWithoutPostcommentInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    info?: StringFieldUpdateOperationsInput | string
    src_url?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    map_id?: IntFieldUpdateOperationsInput | number
    postlike?: PostLikeUncheckedUpdateManyWithoutPostNestedInput
    chat?: ChatUncheckedUpdateManyWithoutPostNestedInput
    search?: SearchUncheckedUpdateManyWithoutPostNestedInput
    profile?: ProfileUncheckedUpdateManyWithoutPostNestedInput
  }

  export type UserUpsertWithoutPostcommentInput = {
    update: XOR<UserUpdateWithoutPostcommentInput, UserUncheckedUpdateWithoutPostcommentInput>
    create: XOR<UserCreateWithoutPostcommentInput, UserUncheckedCreateWithoutPostcommentInput>
  }

  export type UserUpdateWithoutPostcommentInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile_img_num?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    postlike?: PostLikeUpdateManyWithoutUserNestedInput
    chat?: ChatUpdateManyWithoutUserNestedInput
    profile?: ProfileUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPostcommentInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile_img_num?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    postlike?: PostLikeUncheckedUpdateManyWithoutUserNestedInput
    chat?: ChatUncheckedUpdateManyWithoutUserNestedInput
    profile?: ProfileUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ProfileUpsertWithWhereUniqueWithoutPostcommentInput = {
    where: ProfileWhereUniqueInput
    update: XOR<ProfileUpdateWithoutPostcommentInput, ProfileUncheckedUpdateWithoutPostcommentInput>
    create: XOR<ProfileCreateWithoutPostcommentInput, ProfileUncheckedCreateWithoutPostcommentInput>
  }

  export type ProfileUpdateWithWhereUniqueWithoutPostcommentInput = {
    where: ProfileWhereUniqueInput
    data: XOR<ProfileUpdateWithoutPostcommentInput, ProfileUncheckedUpdateWithoutPostcommentInput>
  }

  export type ProfileUpdateManyWithWhereWithoutPostcommentInput = {
    where: ProfileScalarWhereInput
    data: XOR<ProfileUpdateManyMutationInput, ProfileUncheckedUpdateManyWithoutProfileInput>
  }

  export type PostCreateWithoutChatInput = {
    title: string
    info: string
    src_url?: string | null
    createdAt?: Date | string
    map: MapCreateNestedOneWithoutPostInput
    postlike?: PostLikeCreateNestedManyWithoutPostInput
    postcomment?: Post_CommentCreateNestedManyWithoutPostInput
    search?: SearchCreateNestedManyWithoutPostInput
    profile?: ProfileCreateNestedManyWithoutPostInput
  }

  export type PostUncheckedCreateWithoutChatInput = {
    id?: number
    title: string
    info: string
    src_url?: string | null
    createdAt?: Date | string
    map_id: number
    postlike?: PostLikeUncheckedCreateNestedManyWithoutPostInput
    postcomment?: Post_CommentUncheckedCreateNestedManyWithoutPostInput
    search?: SearchUncheckedCreateNestedManyWithoutPostInput
    profile?: ProfileUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostCreateOrConnectWithoutChatInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutChatInput, PostUncheckedCreateWithoutChatInput>
  }

  export type UserCreateWithoutChatInput = {
    email: string
    name: string
    phoneNumber: string
    password: string
    profile_img_num: number
    createdAt?: Date | string
    postlike?: PostLikeCreateNestedManyWithoutUserInput
    postcomment?: Post_CommentCreateNestedManyWithoutUserInput
    profile?: ProfileCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutChatInput = {
    id?: number
    email: string
    name: string
    phoneNumber: string
    password: string
    profile_img_num: number
    createdAt?: Date | string
    postlike?: PostLikeUncheckedCreateNestedManyWithoutUserInput
    postcomment?: Post_CommentUncheckedCreateNestedManyWithoutUserInput
    profile?: ProfileUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutChatInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutChatInput, UserUncheckedCreateWithoutChatInput>
  }

  export type PostUpsertWithoutChatInput = {
    update: XOR<PostUpdateWithoutChatInput, PostUncheckedUpdateWithoutChatInput>
    create: XOR<PostCreateWithoutChatInput, PostUncheckedCreateWithoutChatInput>
  }

  export type PostUpdateWithoutChatInput = {
    title?: StringFieldUpdateOperationsInput | string
    info?: StringFieldUpdateOperationsInput | string
    src_url?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    map?: MapUpdateOneRequiredWithoutPostNestedInput
    postlike?: PostLikeUpdateManyWithoutPostNestedInput
    postcomment?: Post_CommentUpdateManyWithoutPostNestedInput
    search?: SearchUpdateManyWithoutPostNestedInput
    profile?: ProfileUpdateManyWithoutPostNestedInput
  }

  export type PostUncheckedUpdateWithoutChatInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    info?: StringFieldUpdateOperationsInput | string
    src_url?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    map_id?: IntFieldUpdateOperationsInput | number
    postlike?: PostLikeUncheckedUpdateManyWithoutPostNestedInput
    postcomment?: Post_CommentUncheckedUpdateManyWithoutPostNestedInput
    search?: SearchUncheckedUpdateManyWithoutPostNestedInput
    profile?: ProfileUncheckedUpdateManyWithoutPostNestedInput
  }

  export type UserUpsertWithoutChatInput = {
    update: XOR<UserUpdateWithoutChatInput, UserUncheckedUpdateWithoutChatInput>
    create: XOR<UserCreateWithoutChatInput, UserUncheckedCreateWithoutChatInput>
  }

  export type UserUpdateWithoutChatInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile_img_num?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    postlike?: PostLikeUpdateManyWithoutUserNestedInput
    postcomment?: Post_CommentUpdateManyWithoutUserNestedInput
    profile?: ProfileUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutChatInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile_img_num?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    postlike?: PostLikeUncheckedUpdateManyWithoutUserNestedInput
    postcomment?: Post_CommentUncheckedUpdateManyWithoutUserNestedInput
    profile?: ProfileUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PostCreateWithoutSearchInput = {
    title: string
    info: string
    src_url?: string | null
    createdAt?: Date | string
    map: MapCreateNestedOneWithoutPostInput
    postlike?: PostLikeCreateNestedManyWithoutPostInput
    postcomment?: Post_CommentCreateNestedManyWithoutPostInput
    chat?: ChatCreateNestedManyWithoutPostInput
    profile?: ProfileCreateNestedManyWithoutPostInput
  }

  export type PostUncheckedCreateWithoutSearchInput = {
    id?: number
    title: string
    info: string
    src_url?: string | null
    createdAt?: Date | string
    map_id: number
    postlike?: PostLikeUncheckedCreateNestedManyWithoutPostInput
    postcomment?: Post_CommentUncheckedCreateNestedManyWithoutPostInput
    chat?: ChatUncheckedCreateNestedManyWithoutPostInput
    profile?: ProfileUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostCreateOrConnectWithoutSearchInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutSearchInput, PostUncheckedCreateWithoutSearchInput>
  }

  export type PostUpsertWithoutSearchInput = {
    update: XOR<PostUpdateWithoutSearchInput, PostUncheckedUpdateWithoutSearchInput>
    create: XOR<PostCreateWithoutSearchInput, PostUncheckedCreateWithoutSearchInput>
  }

  export type PostUpdateWithoutSearchInput = {
    title?: StringFieldUpdateOperationsInput | string
    info?: StringFieldUpdateOperationsInput | string
    src_url?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    map?: MapUpdateOneRequiredWithoutPostNestedInput
    postlike?: PostLikeUpdateManyWithoutPostNestedInput
    postcomment?: Post_CommentUpdateManyWithoutPostNestedInput
    chat?: ChatUpdateManyWithoutPostNestedInput
    profile?: ProfileUpdateManyWithoutPostNestedInput
  }

  export type PostUncheckedUpdateWithoutSearchInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    info?: StringFieldUpdateOperationsInput | string
    src_url?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    map_id?: IntFieldUpdateOperationsInput | number
    postlike?: PostLikeUncheckedUpdateManyWithoutPostNestedInput
    postcomment?: Post_CommentUncheckedUpdateManyWithoutPostNestedInput
    chat?: ChatUncheckedUpdateManyWithoutPostNestedInput
    profile?: ProfileUncheckedUpdateManyWithoutPostNestedInput
  }

  export type UserCreateWithoutProfileInput = {
    email: string
    name: string
    phoneNumber: string
    password: string
    profile_img_num: number
    createdAt?: Date | string
    postlike?: PostLikeCreateNestedManyWithoutUserInput
    postcomment?: Post_CommentCreateNestedManyWithoutUserInput
    chat?: ChatCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutProfileInput = {
    id?: number
    email: string
    name: string
    phoneNumber: string
    password: string
    profile_img_num: number
    createdAt?: Date | string
    postlike?: PostLikeUncheckedCreateNestedManyWithoutUserInput
    postcomment?: Post_CommentUncheckedCreateNestedManyWithoutUserInput
    chat?: ChatUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutProfileInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
  }

  export type PostCreateWithoutProfileInput = {
    title: string
    info: string
    src_url?: string | null
    createdAt?: Date | string
    map: MapCreateNestedOneWithoutPostInput
    postlike?: PostLikeCreateNestedManyWithoutPostInput
    postcomment?: Post_CommentCreateNestedManyWithoutPostInput
    chat?: ChatCreateNestedManyWithoutPostInput
    search?: SearchCreateNestedManyWithoutPostInput
  }

  export type PostUncheckedCreateWithoutProfileInput = {
    id?: number
    title: string
    info: string
    src_url?: string | null
    createdAt?: Date | string
    map_id: number
    postlike?: PostLikeUncheckedCreateNestedManyWithoutPostInput
    postcomment?: Post_CommentUncheckedCreateNestedManyWithoutPostInput
    chat?: ChatUncheckedCreateNestedManyWithoutPostInput
    search?: SearchUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostCreateOrConnectWithoutProfileInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutProfileInput, PostUncheckedCreateWithoutProfileInput>
  }

  export type Post_CommentCreateWithoutProfileInput = {
    content: string
    star: number
    createdAt?: Date | string
    post: PostCreateNestedOneWithoutPostcommentInput
    user: UserCreateNestedOneWithoutPostcommentInput
  }

  export type Post_CommentUncheckedCreateWithoutProfileInput = {
    id?: number
    content: string
    star: number
    createdAt?: Date | string
    post_id: number
    user_id: number
  }

  export type Post_CommentCreateOrConnectWithoutProfileInput = {
    where: Post_CommentWhereUniqueInput
    create: XOR<Post_CommentCreateWithoutProfileInput, Post_CommentUncheckedCreateWithoutProfileInput>
  }

  export type UserUpsertWithoutProfileInput = {
    update: XOR<UserUpdateWithoutProfileInput, UserUncheckedUpdateWithoutProfileInput>
    create: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
  }

  export type UserUpdateWithoutProfileInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile_img_num?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    postlike?: PostLikeUpdateManyWithoutUserNestedInput
    postcomment?: Post_CommentUpdateManyWithoutUserNestedInput
    chat?: ChatUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutProfileInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile_img_num?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    postlike?: PostLikeUncheckedUpdateManyWithoutUserNestedInput
    postcomment?: Post_CommentUncheckedUpdateManyWithoutUserNestedInput
    chat?: ChatUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PostUpsertWithoutProfileInput = {
    update: XOR<PostUpdateWithoutProfileInput, PostUncheckedUpdateWithoutProfileInput>
    create: XOR<PostCreateWithoutProfileInput, PostUncheckedCreateWithoutProfileInput>
  }

  export type PostUpdateWithoutProfileInput = {
    title?: StringFieldUpdateOperationsInput | string
    info?: StringFieldUpdateOperationsInput | string
    src_url?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    map?: MapUpdateOneRequiredWithoutPostNestedInput
    postlike?: PostLikeUpdateManyWithoutPostNestedInput
    postcomment?: Post_CommentUpdateManyWithoutPostNestedInput
    chat?: ChatUpdateManyWithoutPostNestedInput
    search?: SearchUpdateManyWithoutPostNestedInput
  }

  export type PostUncheckedUpdateWithoutProfileInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    info?: StringFieldUpdateOperationsInput | string
    src_url?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    map_id?: IntFieldUpdateOperationsInput | number
    postlike?: PostLikeUncheckedUpdateManyWithoutPostNestedInput
    postcomment?: Post_CommentUncheckedUpdateManyWithoutPostNestedInput
    chat?: ChatUncheckedUpdateManyWithoutPostNestedInput
    search?: SearchUncheckedUpdateManyWithoutPostNestedInput
  }

  export type Post_CommentUpsertWithoutProfileInput = {
    update: XOR<Post_CommentUpdateWithoutProfileInput, Post_CommentUncheckedUpdateWithoutProfileInput>
    create: XOR<Post_CommentCreateWithoutProfileInput, Post_CommentUncheckedCreateWithoutProfileInput>
  }

  export type Post_CommentUpdateWithoutProfileInput = {
    content?: StringFieldUpdateOperationsInput | string
    star?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    post?: PostUpdateOneRequiredWithoutPostcommentNestedInput
    user?: UserUpdateOneRequiredWithoutPostcommentNestedInput
  }

  export type Post_CommentUncheckedUpdateWithoutProfileInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    star?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    post_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
  }

  export type PostLikeCreateManyUserInput = {
    post_id: number
  }

  export type Post_CommentCreateManyUserInput = {
    id?: number
    content: string
    star: number
    createdAt?: Date | string
    post_id: number
  }

  export type ChatCreateManyUserInput = {
    id?: number
    message: string
    post_id: number
  }

  export type ProfileCreateManyUserInput = {
    id?: number
    post_id: number
    postcomment_id?: number | null
  }

  export type PostLikeUpdateWithoutUserInput = {
    post?: PostUpdateOneRequiredWithoutPostlikeNestedInput
  }

  export type PostLikeUncheckedUpdateWithoutUserInput = {
    post_id?: IntFieldUpdateOperationsInput | number
  }

  export type PostLikeUncheckedUpdateManyWithoutPostlikeInput = {
    post_id?: IntFieldUpdateOperationsInput | number
  }

  export type Post_CommentUpdateWithoutUserInput = {
    content?: StringFieldUpdateOperationsInput | string
    star?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    post?: PostUpdateOneRequiredWithoutPostcommentNestedInput
    profile?: ProfileUpdateManyWithoutPostcommentNestedInput
  }

  export type Post_CommentUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    star?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    post_id?: IntFieldUpdateOperationsInput | number
    profile?: ProfileUncheckedUpdateManyWithoutPostcommentNestedInput
  }

  export type Post_CommentUncheckedUpdateManyWithoutPostcommentInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    star?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    post_id?: IntFieldUpdateOperationsInput | number
  }

  export type ChatUpdateWithoutUserInput = {
    message?: StringFieldUpdateOperationsInput | string
    post?: PostUpdateOneRequiredWithoutChatNestedInput
  }

  export type ChatUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    post_id?: IntFieldUpdateOperationsInput | number
  }

  export type ChatUncheckedUpdateManyWithoutChatInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    post_id?: IntFieldUpdateOperationsInput | number
  }

  export type ProfileUpdateWithoutUserInput = {
    post?: PostUpdateOneRequiredWithoutProfileNestedInput
    postcomment?: Post_CommentUpdateOneWithoutProfileNestedInput
  }

  export type ProfileUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    post_id?: IntFieldUpdateOperationsInput | number
    postcomment_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ProfileUncheckedUpdateManyWithoutProfileInput = {
    id?: IntFieldUpdateOperationsInput | number
    post_id?: IntFieldUpdateOperationsInput | number
    postcomment_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PostCreateManyMapInput = {
    id?: number
    title: string
    info: string
    src_url?: string | null
    createdAt?: Date | string
  }

  export type PostUpdateWithoutMapInput = {
    title?: StringFieldUpdateOperationsInput | string
    info?: StringFieldUpdateOperationsInput | string
    src_url?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    postlike?: PostLikeUpdateManyWithoutPostNestedInput
    postcomment?: Post_CommentUpdateManyWithoutPostNestedInput
    chat?: ChatUpdateManyWithoutPostNestedInput
    search?: SearchUpdateManyWithoutPostNestedInput
    profile?: ProfileUpdateManyWithoutPostNestedInput
  }

  export type PostUncheckedUpdateWithoutMapInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    info?: StringFieldUpdateOperationsInput | string
    src_url?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    postlike?: PostLikeUncheckedUpdateManyWithoutPostNestedInput
    postcomment?: Post_CommentUncheckedUpdateManyWithoutPostNestedInput
    chat?: ChatUncheckedUpdateManyWithoutPostNestedInput
    search?: SearchUncheckedUpdateManyWithoutPostNestedInput
    profile?: ProfileUncheckedUpdateManyWithoutPostNestedInput
  }

  export type PostUncheckedUpdateManyWithoutPostInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    info?: StringFieldUpdateOperationsInput | string
    src_url?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PostLikeCreateManyPostInput = {
    user_id: number
  }

  export type Post_CommentCreateManyPostInput = {
    id?: number
    content: string
    star: number
    createdAt?: Date | string
    user_id: number
  }

  export type ChatCreateManyPostInput = {
    id?: number
    message: string
    user_id: number
  }

  export type SearchCreateManyPostInput = {
    id?: number
    search_title: string
  }

  export type ProfileCreateManyPostInput = {
    id?: number
    user_id: number
    postcomment_id?: number | null
  }

  export type PostLikeUpdateWithoutPostInput = {
    user?: UserUpdateOneRequiredWithoutPostlikeNestedInput
  }

  export type PostLikeUncheckedUpdateWithoutPostInput = {
    user_id?: IntFieldUpdateOperationsInput | number
  }

  export type Post_CommentUpdateWithoutPostInput = {
    content?: StringFieldUpdateOperationsInput | string
    star?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPostcommentNestedInput
    profile?: ProfileUpdateManyWithoutPostcommentNestedInput
  }

  export type Post_CommentUncheckedUpdateWithoutPostInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    star?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user_id?: IntFieldUpdateOperationsInput | number
    profile?: ProfileUncheckedUpdateManyWithoutPostcommentNestedInput
  }

  export type ChatUpdateWithoutPostInput = {
    message?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutChatNestedInput
  }

  export type ChatUncheckedUpdateWithoutPostInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    user_id?: IntFieldUpdateOperationsInput | number
  }

  export type SearchUpdateWithoutPostInput = {
    search_title?: StringFieldUpdateOperationsInput | string
  }

  export type SearchUncheckedUpdateWithoutPostInput = {
    id?: IntFieldUpdateOperationsInput | number
    search_title?: StringFieldUpdateOperationsInput | string
  }

  export type SearchUncheckedUpdateManyWithoutSearchInput = {
    id?: IntFieldUpdateOperationsInput | number
    search_title?: StringFieldUpdateOperationsInput | string
  }

  export type ProfileUpdateWithoutPostInput = {
    user?: UserUpdateOneRequiredWithoutProfileNestedInput
    postcomment?: Post_CommentUpdateOneWithoutProfileNestedInput
  }

  export type ProfileUncheckedUpdateWithoutPostInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    postcomment_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ProfileCreateManyPostcommentInput = {
    id?: number
    user_id: number
    post_id: number
  }

  export type ProfileUpdateWithoutPostcommentInput = {
    user?: UserUpdateOneRequiredWithoutProfileNestedInput
    post?: PostUpdateOneRequiredWithoutProfileNestedInput
  }

  export type ProfileUncheckedUpdateWithoutPostcommentInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    post_id?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}